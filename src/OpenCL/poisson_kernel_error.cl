//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_float 0.0;
#define INFINITY_float INFINITY;
#define ZERO_double 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

//user function

/*void poisson_kernel_error(const ptr_float u,
		const ptr_float ref,
		float *err) {

	*err = *err + (OPS_ACCS(u, 0,0)-OPS_ACCS(ref, 0,0))*(OPS_ACCS(u, 0,0)-OPS_ACCS(ref, 0,0));
}*/

__kernel __attribute__ ((reqd_work_group_size(OPS_block_size_x, OPS_block_size_y, 1)))
__kernel __attribute__((vec_type_hint(float)))
__kernel __attribute__((xcl_zero_global_work_offset))

__kernel void ops_poisson_kernel_error(
		__global const float* restrict arg0,
		__global const float* restrict arg1,
		__global float* restrict arg2,
		__local float* scratch2,
		int r_bytes2,
		const int base0,
		const int base1,
		const int size0,
		const int size1,
		const int xdim0_poisson_kernel_error,
		const int xdim1_poisson_kernel_error){

	arg2 += r_bytes2;
	float arg2_l[1];
	for (int d=0; d<1; d++) arg2_l[d] = ZERO_float;

	int idx_y = get_global_id(1);
	int idx_x = get_global_id(0);

	//int xdim0_poisson_kernel_error = 22;
	//int xdim1_poisson_kernel_error = 22;


	if (idx_x < size0 && idx_y < size1) {
		const __global float* ptr0 = &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_poisson_kernel_error];
		const __global float* ptr1 = &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_poisson_kernel_error];

		*arg2_l = *arg2_l + (*ptr0 - *ptr1 )*( *ptr0 - *ptr1);
	}

	int group_index = get_group_id(0) + get_group_id(1)*get_num_groups(0)+ get_group_id(2)*get_num_groups(0)*get_num_groups(1);

	for (int d=0; d<1; d++)
		reduce_float(arg2_l[d], scratch2, &arg2[group_index*1+d], OPS_INC);

}
