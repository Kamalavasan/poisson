//
// auto-generated by ops.py
//


#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_float 0.0;
#define INFINITY_float INFINITY;
#define ZERO_double 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;


#define MAX_X_DIM 256
#define P_FACTOR 64
#define SHIFT_BITS 6
#define SINGLE_RAM_SIZE 4096


__kernel __attribute__ ((reqd_work_group_size(1, 1, 1)))
__kernel void ops_poisson_kernel_stencil(
		__global float* arg0,
		const int populate_arg0,
		const int populate_arg1,
		const float populate_dx,
		const float populate_dy,
		int populate_arg_idx0,
		int populate_arg_idx1,
		__global float* restrict arg2,
		__local float* scratch2,
		int r_bytes2,
		const int base0,
		const int base1,
		const int size0,
		const int size1,
		const int n_iters){


	int ram_select = 0;

	// RAM u
	local float u1[MAX_X_DIM*MAX_X_DIM] __attribute__((xcl_array_partition(cyclic, MAX_X_DIM, 1)));
	local float u2[MAX_X_DIM*MAX_X_DIM] __attribute__((xcl_array_partition(cyclic, MAX_X_DIM, 1)));


	// Reading the input
    __attribute__((xcl_pipeline_loop(1)))
	__attribute__((xcl_loop_tripcount(1*1, MAX_X_DIM*MAX_X_DIM)))
    readA: for (int itr = 0, i = 0, j = 0; itr < size0 * size0; itr++, j++) {
        if (j == size0) { j = 0; i++; }
        u1[i*MAX_X_DIM + j] = arg0[itr];
    }

    __attribute__((xcl_loop_tripcount(1, 10000, 9999)))
	for(int count = 0; count < n_iters; count++){

		if(ram_select == 0){
			__attribute__((xcl_loop_tripcount(1, MAX_X_DIM)))
			__attribute__((xcl_pipeline_loop(1)))
			for(int i = 0; i < size1; i++){
				__attribute__((xcl_pipeline_loop()))
				__attribute__((xcl_loop_tripcount(1, MAX_X_DIM)))
				for(int j = 0; j < MAX_X_DIM; j++){
					float a1 = u1[(i-1)*MAX_X_DIM + j];
					float b1 = u1[(i+1)*MAX_X_DIM + j];
					float c1 = u1[i*MAX_X_DIM + j-1];
					float d1 = u1[i*MAX_X_DIM + j+1];
					float f1 = u1[i*MAX_X_DIM ];
					float result1 = (a1+b1)*0.125 + (c1+d1)*0.125 + f1*0.5;
					if(j < size0) u2[i*MAX_X_DIM + j] = result1;

				}
			}
		} else {
			__attribute__((xcl_loop_tripcount(1, MAX_X_DIM)))
			__attribute__((xcl_pipeline_loop(1)))
			for(int i = 0; i < size1; i++){
				__attribute__((xcl_pipeline_loop()))
				__attribute__((xcl_loop_tripcount(1, MAX_X_DIM)))
				for(int j = 0; j < MAX_X_DIM; j++){
					float a2 = u2[(i-1)*MAX_X_DIM + j];
					float b2 = u2[(i+1)*MAX_X_DIM + j];
					float c2 = u2[i*MAX_X_DIM + j-1];
					float d2 = u2[i*MAX_X_DIM + j+1];
					float f2 = u2[i*MAX_X_DIM ];
					float result2 = (a2+b2)*0.125 + (c2+d2)*0.125 + f2*0.5;
					if(j < size0) u1[i*MAX_X_DIM + j] = result2;
				}
			}
		}
		ram_select = (ram_select >= 1 ) ? 0 : 1;
	}


	// Reading the input
    __attribute__((xcl_pipeline_loop(1)))
    __attribute__((xcl_loop_tripcount(1*1, MAX_X_DIM*MAX_X_DIM)))
    writeA: for (int itr = 0, i = 0, j = 0; itr < size0 * size0; itr++, j++) {
        if (j == size0) { j = 0; i++; }
        arg0[itr] = ram_select == 1 ? u1[i*MAX_X_DIM + j] : u2[i*MAX_X_DIM + j] ;
    }

}

