//
// auto-generated by ops.py
//


#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_float 0.0;
#define INFINITY_float INFINITY;
#define ZERO_double 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;


#define MAX_X_DIM 512
#define P_FACTOR 64
#define SHIFT_BITS 6
#define SINGLE_RAM_SIZE 4096


__kernel __attribute__ ((reqd_work_group_size(1, 1, 1)))
__kernel void ops_poisson_kernel_stencil(
		__global float16* arg0,
		const int populate_arg0,
		const int populate_arg1,
		const float populate_dx,
		const float populate_dy,
		int populate_arg_idx0,
		int populate_arg_idx1,
		__global float* restrict arg2,
		__local float* scratch2,
		int r_bytes2,
		const int base0,
		const int base1,
		const int size0,
		const int size1,
		const int n_iters){


	// RAM u
	local float u1_0[SINGLE_RAM_SIZE];
	local float u1_1[SINGLE_RAM_SIZE];
	local float u1_2[SINGLE_RAM_SIZE];
	local float u1_3[SINGLE_RAM_SIZE];
	local float u1_4[SINGLE_RAM_SIZE];
	local float u1_5[SINGLE_RAM_SIZE];
	local float u1_6[SINGLE_RAM_SIZE];
	local float u1_7[SINGLE_RAM_SIZE];
	local float u1_8[SINGLE_RAM_SIZE];
	local float u1_9[SINGLE_RAM_SIZE];
	local float u1_10[SINGLE_RAM_SIZE];
	local float u1_11[SINGLE_RAM_SIZE];
	local float u1_12[SINGLE_RAM_SIZE];
	local float u1_13[SINGLE_RAM_SIZE];
	local float u1_14[SINGLE_RAM_SIZE];
	local float u1_15[SINGLE_RAM_SIZE];
	local float u1_16[SINGLE_RAM_SIZE];
	local float u1_17[SINGLE_RAM_SIZE];
	local float u1_18[SINGLE_RAM_SIZE];
	local float u1_19[SINGLE_RAM_SIZE];
	local float u1_20[SINGLE_RAM_SIZE];
	local float u1_21[SINGLE_RAM_SIZE];
	local float u1_22[SINGLE_RAM_SIZE];
	local float u1_23[SINGLE_RAM_SIZE];
	local float u1_24[SINGLE_RAM_SIZE];
	local float u1_25[SINGLE_RAM_SIZE];
	local float u1_26[SINGLE_RAM_SIZE];
	local float u1_27[SINGLE_RAM_SIZE];
	local float u1_28[SINGLE_RAM_SIZE];
	local float u1_29[SINGLE_RAM_SIZE];
	local float u1_30[SINGLE_RAM_SIZE];
	local float u1_31[SINGLE_RAM_SIZE];
	local float u1_32[SINGLE_RAM_SIZE];
	local float u1_33[SINGLE_RAM_SIZE];
	local float u1_34[SINGLE_RAM_SIZE];
	local float u1_35[SINGLE_RAM_SIZE];
	local float u1_36[SINGLE_RAM_SIZE];
	local float u1_37[SINGLE_RAM_SIZE];
	local float u1_38[SINGLE_RAM_SIZE];
	local float u1_39[SINGLE_RAM_SIZE];
	local float u1_40[SINGLE_RAM_SIZE];
	local float u1_41[SINGLE_RAM_SIZE];
	local float u1_42[SINGLE_RAM_SIZE];
	local float u1_43[SINGLE_RAM_SIZE];
	local float u1_44[SINGLE_RAM_SIZE];
	local float u1_45[SINGLE_RAM_SIZE];
	local float u1_46[SINGLE_RAM_SIZE];
	local float u1_47[SINGLE_RAM_SIZE];
	local float u1_48[SINGLE_RAM_SIZE];
	local float u1_49[SINGLE_RAM_SIZE];
	local float u1_50[SINGLE_RAM_SIZE];
	local float u1_51[SINGLE_RAM_SIZE];
	local float u1_52[SINGLE_RAM_SIZE];
	local float u1_53[SINGLE_RAM_SIZE];
	local float u1_54[SINGLE_RAM_SIZE];
	local float u1_55[SINGLE_RAM_SIZE];
	local float u1_56[SINGLE_RAM_SIZE];
	local float u1_57[SINGLE_RAM_SIZE];
	local float u1_58[SINGLE_RAM_SIZE];
	local float u1_59[SINGLE_RAM_SIZE];
	local float u1_60[SINGLE_RAM_SIZE];
	local float u1_61[SINGLE_RAM_SIZE];
	local float u1_62[SINGLE_RAM_SIZE];
	local float u1_63[SINGLE_RAM_SIZE];


	// Ram u2
	local float u2_0[SINGLE_RAM_SIZE];
	local float u2_1[SINGLE_RAM_SIZE];
	local float u2_2[SINGLE_RAM_SIZE];
	local float u2_3[SINGLE_RAM_SIZE];
	local float u2_4[SINGLE_RAM_SIZE];
	local float u2_5[SINGLE_RAM_SIZE];
	local float u2_6[SINGLE_RAM_SIZE];
	local float u2_7[SINGLE_RAM_SIZE];
	local float u2_8[SINGLE_RAM_SIZE];
	local float u2_9[SINGLE_RAM_SIZE];
	local float u2_10[SINGLE_RAM_SIZE];
	local float u2_11[SINGLE_RAM_SIZE];
	local float u2_12[SINGLE_RAM_SIZE];
	local float u2_13[SINGLE_RAM_SIZE];
	local float u2_14[SINGLE_RAM_SIZE];
	local float u2_15[SINGLE_RAM_SIZE];
	local float u2_16[SINGLE_RAM_SIZE];
	local float u2_17[SINGLE_RAM_SIZE];
	local float u2_18[SINGLE_RAM_SIZE];
	local float u2_19[SINGLE_RAM_SIZE];
	local float u2_20[SINGLE_RAM_SIZE];
	local float u2_21[SINGLE_RAM_SIZE];
	local float u2_22[SINGLE_RAM_SIZE];
	local float u2_23[SINGLE_RAM_SIZE];
	local float u2_24[SINGLE_RAM_SIZE];
	local float u2_25[SINGLE_RAM_SIZE];
	local float u2_26[SINGLE_RAM_SIZE];
	local float u2_27[SINGLE_RAM_SIZE];
	local float u2_28[SINGLE_RAM_SIZE];
	local float u2_29[SINGLE_RAM_SIZE];
	local float u2_30[SINGLE_RAM_SIZE];
	local float u2_31[SINGLE_RAM_SIZE];
	local float u2_32[SINGLE_RAM_SIZE];
	local float u2_33[SINGLE_RAM_SIZE];
	local float u2_34[SINGLE_RAM_SIZE];
	local float u2_35[SINGLE_RAM_SIZE];
	local float u2_36[SINGLE_RAM_SIZE];
	local float u2_37[SINGLE_RAM_SIZE];
	local float u2_38[SINGLE_RAM_SIZE];
	local float u2_39[SINGLE_RAM_SIZE];
	local float u2_40[SINGLE_RAM_SIZE];
	local float u2_41[SINGLE_RAM_SIZE];
	local float u2_42[SINGLE_RAM_SIZE];
	local float u2_43[SINGLE_RAM_SIZE];
	local float u2_44[SINGLE_RAM_SIZE];
	local float u2_45[SINGLE_RAM_SIZE];
	local float u2_46[SINGLE_RAM_SIZE];
	local float u2_47[SINGLE_RAM_SIZE];
	local float u2_48[SINGLE_RAM_SIZE];
	local float u2_49[SINGLE_RAM_SIZE];
	local float u2_50[SINGLE_RAM_SIZE];
	local float u2_51[SINGLE_RAM_SIZE];
	local float u2_52[SINGLE_RAM_SIZE];
	local float u2_53[SINGLE_RAM_SIZE];
	local float u2_54[SINGLE_RAM_SIZE];
	local float u2_55[SINGLE_RAM_SIZE];
	local float u2_56[SINGLE_RAM_SIZE];
	local float u2_57[SINGLE_RAM_SIZE];
	local float u2_58[SINGLE_RAM_SIZE];
	local float u2_59[SINGLE_RAM_SIZE];
	local float u2_60[SINGLE_RAM_SIZE];
	local float u2_61[SINGLE_RAM_SIZE];
	local float u2_62[SINGLE_RAM_SIZE];
	local float u2_63[SINGLE_RAM_SIZE];


	int base_index1, base_index2, base_index3, base_index0;
	int end_loc =  (size0 >> 6) + 1;
	const int row_block = MAX_X_DIM/P_FACTOR;



	//initial pointer assigning
		local float * ptr1_0 =  u1_0;
		local float * ptr1_1 =  u1_1;
		local float * ptr1_2 =  u1_2;
		local float * ptr1_3 =  u1_3;
		local float * ptr1_4 =  u1_4;
		local float * ptr1_5 =  u1_5;
		local float * ptr1_6 =  u1_6;
		local float * ptr1_7 =  u1_7;
		local float * ptr1_8 =  u1_8;
		local float * ptr1_9 =  u1_9;
		local float * ptr1_10 = u1_10;
		local float * ptr1_11 = u1_11;
		local float * ptr1_12 = u1_12;
		local float * ptr1_13 = u1_13;
		local float * ptr1_14 = u1_14;
		local float * ptr1_15 = u1_15;
		local float * ptr1_16 = u1_16;
		local float * ptr1_17 = u1_17;
		local float * ptr1_18 = u1_18;
		local float * ptr1_19 = u1_19;
		local float * ptr1_20 = u1_20;
		local float * ptr1_21 = u1_21;
		local float * ptr1_22 = u1_22;
		local float * ptr1_23 = u1_23;
		local float * ptr1_24 = u1_24;
		local float * ptr1_25 = u1_25;
		local float * ptr1_26 = u1_26;
		local float * ptr1_27 = u1_27;
		local float * ptr1_28 = u1_28;
		local float * ptr1_29 = u1_29;
		local float * ptr1_30 = u1_30;
		local float * ptr1_31 = u1_31;
		local float * ptr1_32 = u1_32;
		local float * ptr1_33 = u1_33;
		local float * ptr1_34 = u1_34;
		local float * ptr1_35 = u1_35;
		local float * ptr1_36 = u1_36;
		local float * ptr1_37 = u1_37;
		local float * ptr1_38 = u1_38;
		local float * ptr1_39 = u1_39;
		local float * ptr1_40 = u1_40;
		local float * ptr1_41 = u1_41;
		local float * ptr1_42 = u1_42;
		local float * ptr1_43 = u1_43;
		local float * ptr1_44 = u1_44;
		local float * ptr1_45 = u1_45;
		local float * ptr1_46 = u1_46;
		local float * ptr1_47 = u1_47;
		local float * ptr1_48 = u1_48;
		local float * ptr1_49 = u1_49;
		local float * ptr1_50 = u1_50;
		local float * ptr1_51 = u1_51;
		local float * ptr1_52 = u1_52;
		local float * ptr1_53 = u1_53;
		local float * ptr1_54 = u1_54;
		local float * ptr1_55 = u1_55;
		local float * ptr1_56 = u1_56;
		local float * ptr1_57 = u1_57;
		local float * ptr1_58 = u1_58;
		local float * ptr1_59 = u1_59;
		local float * ptr1_60 = u1_60;
		local float * ptr1_61 = u1_61;
		local float * ptr1_62 = u1_62;
		local float * ptr1_63 = u1_63;


		local float * ptr2_0 =  u2_0;
		local float * ptr2_1 =  u2_1;
		local float * ptr2_2 =  u2_2;
		local float * ptr2_3 =  u2_3;
		local float * ptr2_4 =  u2_4;
		local float * ptr2_5 =  u2_5;
		local float * ptr2_6 =  u2_6;
		local float * ptr2_7 =  u2_7;
		local float * ptr2_8 =  u2_8;
		local float * ptr2_9 =  u2_9;
		local float * ptr2_10 = u2_10;
		local float * ptr2_11 = u2_11;
		local float * ptr2_12 = u2_12;
		local float * ptr2_13 = u2_13;
		local float * ptr2_14 = u2_14;
		local float * ptr2_15 = u2_15;
		local float * ptr2_16 = u2_16;
		local float * ptr2_17 = u2_17;
		local float * ptr2_18 = u2_18;
		local float * ptr2_19 = u2_19;
		local float * ptr2_20 = u2_20;
		local float * ptr2_21 = u2_21;
		local float * ptr2_22 = u2_22;
		local float * ptr2_23 = u2_23;
		local float * ptr2_24 = u2_24;
		local float * ptr2_25 = u2_25;
		local float * ptr2_26 = u2_26;
		local float * ptr2_27 = u2_27;
		local float * ptr2_28 = u2_28;
		local float * ptr2_29 = u2_29;
		local float * ptr2_30 = u2_30;
		local float * ptr2_31 = u2_31;
		local float * ptr2_32 = u2_32;
		local float * ptr2_33 = u2_33;
		local float * ptr2_34 = u2_34;
		local float * ptr2_35 = u2_35;
		local float * ptr2_36 = u2_36;
		local float * ptr2_37 = u2_37;
		local float * ptr2_38 = u2_38;
		local float * ptr2_39 = u2_39;
		local float * ptr2_40 = u2_40;
		local float * ptr2_41 = u2_41;
		local float * ptr2_42 = u2_42;
		local float * ptr2_43 = u2_43;
		local float * ptr2_44 = u2_44;
		local float * ptr2_45 = u2_45;
		local float * ptr2_46 = u2_46;
		local float * ptr2_47 = u2_47;
		local float * ptr2_48 = u2_48;
		local float * ptr2_49 = u2_49;
		local float * ptr2_50 = u2_50;
		local float * ptr2_51 = u2_51;
		local float * ptr2_52 = u2_52;
		local float * ptr2_53 = u2_53;
		local float * ptr2_54 = u2_54;
		local float * ptr2_55 = u2_55;
		local float * ptr2_56 = u2_56;
		local float * ptr2_57 = u2_57;
		local float * ptr2_58 = u2_58;
		local float * ptr2_59 = u2_59;
		local float * ptr2_60 = u2_60;
		local float * ptr2_61 = u2_61;
		local float * ptr2_62 = u2_62;
		local float * ptr2_63 = u2_63;

	// Reading the input
	for(int i = 0; i < size1; i++){
		int base_index_local = (i) * row_block;
		int base_index_global = i * ((size0 >> 4) + 1);
		int select = 0;
		read_a_row: __attribute__((xcl_pipeline_loop))
		for(int j = 0; j < (size0 >> 4) + 1; j++){
			int j_local = (j >> 2);
			float16 tmp = arg0[base_index_global + j];
			switch(select) {
				case 0: {
							ptr1_0[base_index_local+j_local]  	= tmp.s0;
							ptr1_1[base_index_local+j_local]  	= tmp.s1;
							ptr1_2[base_index_local+j_local]  	= tmp.s2;
							ptr1_3[base_index_local+j_local]  	= tmp.s3;
							ptr1_4[base_index_local+j_local]  	= tmp.s4;
							ptr1_5[base_index_local+j_local]  	= tmp.s5;
							ptr1_6[base_index_local+j_local]  	= tmp.s6;
							ptr1_7[base_index_local+j_local]  	= tmp.s7;
							ptr1_8[base_index_local+j_local]  	= tmp.s8;
							ptr1_9[base_index_local+j_local]  	= tmp.s9;
							ptr1_10[base_index_local+j_local]  	= tmp.sa;
							ptr1_11[base_index_local+j_local]  	= tmp.sb;
							ptr1_12[base_index_local+j_local]  	= tmp.sc;
							ptr1_13[base_index_local+j_local]  	= tmp.sd;
							ptr1_14[base_index_local+j_local]  	= tmp.se;
							ptr1_15[base_index_local+j_local]  	= tmp.sf;
						}

				case 1: {
							ptr1_16[base_index_local+j_local]  	= tmp.s0;
							ptr1_17[base_index_local+j_local]  	= tmp.s1;
							ptr1_18[base_index_local+j_local]  	= tmp.s2;
							ptr1_19[base_index_local+j_local]  	= tmp.s3;
							ptr1_20[base_index_local+j_local]  	= tmp.s4;
							ptr1_21[base_index_local+j_local]  	= tmp.s5;
							ptr1_22[base_index_local+j_local]  	= tmp.s6;
							ptr1_23[base_index_local+j_local]  	= tmp.s7;
							ptr1_24[base_index_local+j_local]  	= tmp.s8;
							ptr1_25[base_index_local+j_local]  	= tmp.s9;
							ptr1_26[base_index_local+j_local]  	= tmp.sa;
							ptr1_27[base_index_local+j_local]  	= tmp.sb;
							ptr1_28[base_index_local+j_local]  	= tmp.sc;
							ptr1_29[base_index_local+j_local]  	= tmp.sd;
							ptr1_30[base_index_local+j_local]  	= tmp.se;
							ptr1_31[base_index_local+j_local]  	= tmp.sf;
						}

				case 2: {
							ptr1_32[base_index_local+j_local]  	= tmp.s0;
							ptr1_33[base_index_local+j_local]  	= tmp.s1;
							ptr1_34[base_index_local+j_local]  	= tmp.s2;
							ptr1_35[base_index_local+j_local]  	= tmp.s3;
							ptr1_36[base_index_local+j_local]  	= tmp.s4;
							ptr1_37[base_index_local+j_local]  	= tmp.s5;
							ptr1_38[base_index_local+j_local]  	= tmp.s6;
							ptr1_39[base_index_local+j_local]  	= tmp.s7;
							ptr1_40[base_index_local+j_local]  	= tmp.s8;
							ptr1_41[base_index_local+j_local]  	= tmp.s9;
							ptr1_42[base_index_local+j_local]  	= tmp.sa;
							ptr1_43[base_index_local+j_local]  	= tmp.sb;
							ptr1_44[base_index_local+j_local]  	= tmp.sc;
							ptr1_45[base_index_local+j_local]  	= tmp.sd;
							ptr1_46[base_index_local+j_local]  	= tmp.se;
							ptr1_47[base_index_local+j_local]  	= tmp.sf;
						}

				case 3: {
							ptr1_48[base_index_local+j_local]  	= tmp.s0;
							ptr1_49[base_index_local+j_local]  	= tmp.s1;
							ptr1_50[base_index_local+j_local]  	= tmp.s2;
							ptr1_51[base_index_local+j_local]  	= tmp.s3;
							ptr1_52[base_index_local+j_local]  	= tmp.s4;
							ptr1_53[base_index_local+j_local]  	= tmp.s5;
							ptr1_54[base_index_local+j_local]  	= tmp.s6;
							ptr1_55[base_index_local+j_local]  	= tmp.s7;
							ptr1_56[base_index_local+j_local]  	= tmp.s8;
							ptr1_57[base_index_local+j_local]  	= tmp.s9;
							ptr1_58[base_index_local+j_local]  	= tmp.sa;
							ptr1_59[base_index_local+j_local]  	= tmp.sb;
							ptr1_60[base_index_local+j_local]  	= tmp.sc;
							ptr1_61[base_index_local+j_local]  	= tmp.sd;
							ptr1_62[base_index_local+j_local]  	= tmp.se;
							ptr1_63[base_index_local+j_local]  	= tmp.sf;
						}
			}
			select = select + 1;
			select = (select >= 4) ? 0 : select;
		}
	}

	int ram_select = 0;
	__attribute__((xcl_pipeline_loop))
	for(int count = 0; count < n_iters; count++){
		__attribute__((xcl_pipeline_loop))
		for(int j = 0; j < end_loc; j++){

			int base_index0 = 0;
			int base_index1 = row_block;
			int base_index2 = 2 * row_block;


			float row_r0[64] __attribute__((xcl_array_partition(complete, 1))) = {
							ptr1_0[base_index0 + j], ptr1_1[base_index0 + j], ptr1_2[base_index0 + j], ptr1_3[base_index0 + j],
							ptr1_4[base_index0 + j], ptr1_5[base_index0 + j], ptr1_6[base_index0 + j], ptr1_7[base_index0 + j],
							ptr1_8[base_index0 + j], ptr1_9[base_index0 + j], ptr1_10[base_index0 + j], ptr1_11[base_index0 + j],
							ptr1_12[base_index0 + j], ptr1_13[base_index0 + j], ptr1_14[base_index0 + j], ptr1_15[base_index0 + j],
							ptr1_16[base_index0 + j], ptr1_17[base_index0 + j], ptr1_18[base_index0 + j], ptr1_19[base_index0 + j],
							ptr1_20[base_index0 + j], ptr1_21[base_index0 + j], ptr1_22[base_index0 + j], ptr1_23[base_index0 + j],
							ptr1_24[base_index0 + j], ptr1_25[base_index0 + j], ptr1_26[base_index0 + j], ptr1_27[base_index0 + j],
							ptr1_28[base_index0 + j], ptr1_29[base_index0 + j], ptr1_30[base_index0 + j], ptr1_31[base_index0 + j],
							ptr1_32[base_index0 + j], ptr1_33[base_index0 + j], ptr1_34[base_index0 + j], ptr1_35[base_index0 + j],
							ptr1_36[base_index0 + j], ptr1_37[base_index0 + j], ptr1_38[base_index0 + j], ptr1_39[base_index0 + j],
							ptr1_40[base_index0 + j], ptr1_41[base_index0 + j], ptr1_42[base_index0 + j], ptr1_43[base_index0 + j],
							ptr1_44[base_index0 + j], ptr1_45[base_index0 + j], ptr1_46[base_index0 + j], ptr1_47[base_index0 + j],
							ptr1_48[base_index0 + j], ptr1_49[base_index0 + j], ptr1_50[base_index0 + j], ptr1_51[base_index0 + j],
							ptr1_52[base_index0 + j], ptr1_53[base_index0 + j], ptr1_54[base_index0 + j], ptr1_55[base_index0 + j],
							ptr1_56[base_index0 + j], ptr1_57[base_index0 + j], ptr1_58[base_index0 + j], ptr1_59[base_index0 + j],
							ptr1_60[base_index0 + j], ptr1_61[base_index0 + j], ptr1_62[base_index0 + j], ptr1_63[base_index0 + j]
			};


			float row_r1[64] __attribute__((xcl_array_partition(complete, 1))) = {
							ptr1_0[base_index1 + j], ptr1_1[base_index1 + j], ptr1_2[base_index1 + j], ptr1_3[base_index1 + j],
							ptr1_4[base_index1 + j], ptr1_5[base_index1 + j], ptr1_6[base_index1 + j], ptr1_7[base_index1 + j],
							ptr1_8[base_index1 + j], ptr1_9[base_index1 + j], ptr1_10[base_index1 + j], ptr1_11[base_index1 + j],
							ptr1_12[base_index1 + j], ptr1_13[base_index1 + j], ptr1_14[base_index1 + j], ptr1_15[base_index1 + j],
							ptr1_16[base_index1 + j], ptr1_17[base_index1 + j], ptr1_18[base_index1 + j], ptr1_19[base_index1 + j],
							ptr1_20[base_index1 + j], ptr1_21[base_index1 + j], ptr1_22[base_index1 + j], ptr1_23[base_index1 + j],
							ptr1_24[base_index1 + j], ptr1_25[base_index1 + j], ptr1_26[base_index1 + j], ptr1_27[base_index1 + j],
							ptr1_28[base_index1 + j], ptr1_29[base_index1 + j], ptr1_30[base_index1 + j], ptr1_31[base_index1 + j],
							ptr1_32[base_index1 + j], ptr1_33[base_index1 + j], ptr1_34[base_index1 + j], ptr1_35[base_index1 + j],
							ptr1_36[base_index1 + j], ptr1_37[base_index1 + j], ptr1_38[base_index1 + j], ptr1_39[base_index1 + j],
							ptr1_40[base_index1 + j], ptr1_41[base_index1 + j], ptr1_42[base_index1 + j], ptr1_43[base_index1 + j],
							ptr1_44[base_index1 + j], ptr1_45[base_index1 + j], ptr1_46[base_index1 + j], ptr1_47[base_index1 + j],
							ptr1_48[base_index1 + j], ptr1_49[base_index1 + j], ptr1_50[base_index1 + j], ptr1_51[base_index1 + j],
							ptr1_52[base_index1 + j], ptr1_53[base_index1 + j], ptr1_54[base_index1 + j], ptr1_55[base_index1 + j],
							ptr1_56[base_index1 + j], ptr1_57[base_index1 + j], ptr1_58[base_index1 + j], ptr1_59[base_index1 + j],
							ptr1_60[base_index1 + j], ptr1_61[base_index1 + j], ptr1_62[base_index1 + j], ptr1_63[base_index1 + j]
			};

			float row_r2[64] __attribute__((xcl_array_partition(complete, 1))) = {
							ptr1_0[base_index2 + j], ptr1_1[base_index2 + j], ptr1_2[base_index2 + j], ptr1_3[base_index2 + j],
							ptr1_4[base_index2 + j], ptr1_5[base_index2 + j], ptr1_6[base_index2 + j], ptr1_7[base_index2 + j],
							ptr1_8[base_index2 + j], ptr1_9[base_index2 + j], ptr1_10[base_index2 + j], ptr1_11[base_index2 + j],
							ptr1_12[base_index2 + j], ptr1_13[base_index2 + j], ptr1_14[base_index2 + j], ptr1_15[base_index2 + j],
							ptr1_16[base_index2 + j], ptr1_17[base_index2 + j], ptr1_18[base_index2 + j], ptr1_19[base_index2 + j],
							ptr1_20[base_index2 + j], ptr1_21[base_index2 + j], ptr1_22[base_index2 + j], ptr1_23[base_index2 + j],
							ptr1_24[base_index2 + j], ptr1_25[base_index2 + j], ptr1_26[base_index2 + j], ptr1_27[base_index2 + j],
							ptr1_28[base_index2 + j], ptr1_29[base_index2 + j], ptr1_30[base_index2 + j], ptr1_31[base_index2 + j],
							ptr1_32[base_index2 + j], ptr1_33[base_index2 + j], ptr1_34[base_index2 + j], ptr1_35[base_index2 + j],
							ptr1_36[base_index2 + j], ptr1_37[base_index2 + j], ptr1_38[base_index2 + j], ptr1_39[base_index2 + j],
							ptr1_40[base_index2 + j], ptr1_41[base_index2 + j], ptr1_42[base_index2 + j], ptr1_43[base_index2 + j],
							ptr1_44[base_index2 + j], ptr1_45[base_index2 + j], ptr1_46[base_index2 + j], ptr1_47[base_index2 + j],
							ptr1_48[base_index2 + j], ptr1_49[base_index2 + j], ptr1_50[base_index2 + j], ptr1_51[base_index2 + j],
							ptr1_52[base_index2 + j], ptr1_53[base_index2 + j], ptr1_54[base_index2 + j], ptr1_55[base_index2 + j],
							ptr1_56[base_index2 + j], ptr1_57[base_index2 + j], ptr1_58[base_index2 + j], ptr1_59[base_index2 + j],
							ptr1_60[base_index2 + j], ptr1_61[base_index2 + j], ptr1_62[base_index2 + j], ptr1_63[base_index2 + j]
			};



			float* ptr_row_r0 = row_r0;
			float* ptr_row_r1 = row_r1;
			float* ptr_row_r2 = row_r2;

			int row_select = 0;

			__attribute__((xcl_pipeline_loop))
			for(int i = 0; i < size0 ; i++){

				int index1 = j * 64 + 1;
				int index2 = j * 64 + 2;
				int index3 = j * 64 + 3;
				int index4 = j * 64 + 4;
				int index5 = j * 64 + 5;
				int index6 = j * 64 + 6;
				int index7 = j * 64 + 7;
				int index8 = j * 64 + 8;
				int index9 = j * 64 + 9;
				int index10 = j * 64 + 10;
				int index11 = j * 64 + 11;
				int index12 = j * 64 + 12;
				int index13 = j * 64 + 13;
				int index14 = j * 64 + 14;
				int index15 = j * 64 + 15;
				int index16 = j * 64 + 16;
				int index17 = j * 64 + 17;
				int index18 = j * 64 + 18;
				int index19 = j * 64 + 19;
				int index20 = j * 64 + 20;
				int index21 = j * 64 + 21;
				int index22 = j * 64 + 22;
				int index23 = j * 64 + 23;
				int index24 = j * 64 + 24;
				int index25 = j * 64 + 25;
				int index26 = j * 64 + 26;
				int index27 = j * 64 + 27;
				int index28 = j * 64 + 28;
				int index29 = j * 64 + 29;
				int index30 = j * 64 + 30;
				int index31 = j * 64 + 31;
				int index32 = j * 64 + 32;
				int index33 = j * 64 + 33;
				int index34 = j * 64 + 34;
				int index35 = j * 64 + 35;
				int index36 = j * 64 + 36;
				int index37 = j * 64 + 37;
				int index38 = j * 64 + 38;
				int index39 = j * 64 + 39;
				int index40 = j * 64 + 40;
				int index41 = j * 64 + 41;
				int index42 = j * 64 + 42;
				int index43 = j * 64 + 43;
				int index44 = j * 64 + 44;
				int index45 = j * 64 + 45;
				int index46 = j * 64 + 46;
				int index47 = j * 64 + 47;
				int index48 = j * 64 + 48;
				int index49 = j * 64 + 49;
				int index50 = j * 64 + 50;
				int index51 = j * 64 + 51;
				int index52 = j * 64 + 52;
				int index53 = j * 64 + 53;
				int index54 = j * 64 + 54;
				int index55 = j * 64 + 55;
				int index56 = j * 64 + 56;
				int index57 = j * 64 + 57;
				int index58 = j * 64 + 58;
				int index59 = j * 64 + 59;
				int index60 = j * 64 + 60;
				int index61 = j * 64 + 61;
				int index62 = j * 64 + 62;

				float f1_1 = (ptr_row_r0[1] + ptr_row_r2[1]) * 0.125;
				float f2_1 = (ptr_row_r1[0] + ptr_row_r1[2]) * 0.125;
				float f3_1 = ptr_row_r1[1] * 0.5;
				float result_1 = f1_1 + f2_1 + f3_1;
				ptr2_1[base_index1 + j] = (index1  < size0) ? result_1: ptr_row_r1[1];


				float f1_2 = (ptr_row_r0[2] + ptr_row_r2[2]) * 0.125;
				float f2_2 = (ptr_row_r1[1] + ptr_row_r1[3]) * 0.125;
				float f3_2 = ptr_row_r1[2] * 0.5;
				float result_2 = f1_2 + f2_2 + f3_2;
				ptr2_2[base_index1 + j] = (index2  < size0) ? result_2: ptr_row_r1[2];


				float f1_3 = (ptr_row_r0[3] + ptr_row_r2[3]) * 0.125;
				float f2_3 = (ptr_row_r1[2] + ptr_row_r1[4]) * 0.125;
				float f3_3 = ptr_row_r1[3] * 0.5;
				float result_3 = f1_3 + f2_3 + f3_3;
				ptr2_3[base_index1 + j] = (index3  < size0) ? result_3: ptr_row_r1[3];


				float f1_4 = (ptr_row_r0[4] + ptr_row_r2[4]) * 0.125;
				float f2_4 = (ptr_row_r1[3] + ptr_row_r1[5]) * 0.125;
				float f3_4 = ptr_row_r1[4] * 0.5;
				float result_4 = f1_4 + f2_4 + f3_4;
				ptr2_4[base_index1 + j] = (index4  < size0) ? result_4: ptr_row_r1[4];


				float f1_5 = (ptr_row_r0[5] + ptr_row_r2[5]) * 0.125;
				float f2_5 = (ptr_row_r1[4] + ptr_row_r1[6]) * 0.125;
				float f3_5 = ptr_row_r1[5] * 0.5;
				float result_5 = f1_5 + f2_5 + f3_5;
				ptr2_5[base_index1 + j] = (index5  < size0) ? result_5: ptr_row_r1[5];


				float f1_6 = (ptr_row_r0[6] + ptr_row_r2[6]) * 0.125;
				float f2_6 = (ptr_row_r1[5] + ptr_row_r1[7]) * 0.125;
				float f3_6 = ptr_row_r1[6] * 0.5;
				float result_6 = f1_6 + f2_6 + f3_6;
				ptr2_6[base_index1 + j] = (index6  < size0) ? result_6: ptr_row_r1[6];


				float f1_7 = (ptr_row_r0[7] + ptr_row_r2[7]) * 0.125;
				float f2_7 = (ptr_row_r1[6] + ptr_row_r1[8]) * 0.125;
				float f3_7 = ptr_row_r1[7] * 0.5;
				float result_7 = f1_7 + f2_7 + f3_7;
				ptr2_7[base_index1 + j] = (index7  < size0) ? result_7: ptr_row_r1[7];


				float f1_8 = (ptr_row_r0[8] + ptr_row_r2[8]) * 0.125;
				float f2_8 = (ptr_row_r1[7] + ptr_row_r1[9]) * 0.125;
				float f3_8 = ptr_row_r1[8] * 0.5;
				float result_8 = f1_8 + f2_8 + f3_8;
				ptr2_8[base_index1 + j] = (index8  < size0) ? result_8: ptr_row_r1[8];


				float f1_9 = (ptr_row_r0[9] + ptr_row_r2[9]) * 0.125;
				float f2_9 = (ptr_row_r1[8] + ptr_row_r1[10]) * 0.125;
				float f3_9 = ptr_row_r1[9] * 0.5;
				float result_9 = f1_9 + f2_9 + f3_9;
				ptr2_9[base_index1 + j] = (index9  < size0) ? result_9: ptr_row_r1[9];


				float f1_10 = (ptr_row_r0[10] + ptr_row_r2[10]) * 0.125;
				float f2_10 = (ptr_row_r1[9] + ptr_row_r1[11]) * 0.125;
				float f3_10 = ptr_row_r1[10] * 0.5;
				float result_10 = f1_10 + f2_10 + f3_10;
				ptr2_10[base_index1 + j] = (index10  < size0) ? result_10: ptr_row_r1[10];


				float f1_11 = (ptr_row_r0[11] + ptr_row_r2[11]) * 0.125;
				float f2_11 = (ptr_row_r1[10] + ptr_row_r1[12]) * 0.125;
				float f3_11 = ptr_row_r1[11] * 0.5;
				float result_11 = f1_11 + f2_11 + f3_11;
				ptr2_11[base_index1 + j] = (index11  < size0) ? result_11: ptr_row_r1[11];


				float f1_12 = (ptr_row_r0[12] + ptr_row_r2[12]) * 0.125;
				float f2_12 = (ptr_row_r1[11] + ptr_row_r1[13]) * 0.125;
				float f3_12 = ptr_row_r1[12] * 0.5;
				float result_12 = f1_12 + f2_12 + f3_12;
				ptr2_12[base_index1 + j] = (index12  < size0) ? result_12: ptr_row_r1[12];


				float f1_13 = (ptr_row_r0[13] + ptr_row_r2[13]) * 0.125;
				float f2_13 = (ptr_row_r1[12] + ptr_row_r1[14]) * 0.125;
				float f3_13 = ptr_row_r1[13] * 0.5;
				float result_13 = f1_13 + f2_13 + f3_13;
				ptr2_13[base_index1 + j] = (index13  < size0) ? result_13: ptr_row_r1[13];


				float f1_14 = (ptr_row_r0[14] + ptr_row_r2[14]) * 0.125;
				float f2_14 = (ptr_row_r1[13] + ptr_row_r1[15]) * 0.125;
				float f3_14 = ptr_row_r1[14] * 0.5;
				float result_14 = f1_14 + f2_14 + f3_14;
				ptr2_14[base_index1 + j] = (index14  < size0) ? result_14: ptr_row_r1[14];


				float f1_15 = (ptr_row_r0[15] + ptr_row_r2[15]) * 0.125;
				float f2_15 = (ptr_row_r1[14] + ptr_row_r1[16]) * 0.125;
				float f3_15 = ptr_row_r1[15] * 0.5;
				float result_15 = f1_15 + f2_15 + f3_15;
				ptr2_15[base_index1 + j] = (index15  < size0) ? result_15: ptr_row_r1[15];


				float f1_16 = (ptr_row_r0[16] + ptr_row_r2[16]) * 0.125;
				float f2_16 = (ptr_row_r1[15] + ptr_row_r1[17]) * 0.125;
				float f3_16 = ptr_row_r1[16] * 0.5;
				float result_16 = f1_16 + f2_16 + f3_16;
				ptr2_16[base_index1 + j] = (index16  < size0) ? result_16: ptr_row_r1[16];


				float f1_17 = (ptr_row_r0[17] + ptr_row_r2[17]) * 0.125;
				float f2_17 = (ptr_row_r1[16] + ptr_row_r1[18]) * 0.125;
				float f3_17 = ptr_row_r1[17] * 0.5;
				float result_17 = f1_17 + f2_17 + f3_17;
				ptr2_17[base_index1 + j] = (index17  < size0) ? result_17: ptr_row_r1[17];


				float f1_18 = (ptr_row_r0[18] + ptr_row_r2[18]) * 0.125;
				float f2_18 = (ptr_row_r1[17] + ptr_row_r1[19]) * 0.125;
				float f3_18 = ptr_row_r1[18] * 0.5;
				float result_18 = f1_18 + f2_18 + f3_18;
				ptr2_18[base_index1 + j] = (index18  < size0) ? result_18: ptr_row_r1[18];


				float f1_19 = (ptr_row_r0[19] + ptr_row_r2[19]) * 0.125;
				float f2_19 = (ptr_row_r1[18] + ptr_row_r1[20]) * 0.125;
				float f3_19 = ptr_row_r1[19] * 0.5;
				float result_19 = f1_19 + f2_19 + f3_19;
				ptr2_19[base_index1 + j] = (index19  < size0) ? result_19: ptr_row_r1[19];


				float f1_20 = (ptr_row_r0[20] + ptr_row_r2[20]) * 0.125;
				float f2_20 = (ptr_row_r1[19] + ptr_row_r1[21]) * 0.125;
				float f3_20 = ptr_row_r1[20] * 0.5;
				float result_20 = f1_20 + f2_20 + f3_20;
				ptr2_20[base_index1 + j] = (index20  < size0) ? result_20: ptr_row_r1[20];


				float f1_21 = (ptr_row_r0[21] + ptr_row_r2[21]) * 0.125;
				float f2_21 = (ptr_row_r1[20] + ptr_row_r1[22]) * 0.125;
				float f3_21 = ptr_row_r1[21] * 0.5;
				float result_21 = f1_21 + f2_21 + f3_21;
				ptr2_21[base_index1 + j] = (index21  < size0) ? result_21: ptr_row_r1[21];


				float f1_22 = (ptr_row_r0[22] + ptr_row_r2[22]) * 0.125;
				float f2_22 = (ptr_row_r1[21] + ptr_row_r1[23]) * 0.125;
				float f3_22 = ptr_row_r1[22] * 0.5;
				float result_22 = f1_22 + f2_22 + f3_22;
				ptr2_22[base_index1 + j] = (index22  < size0) ? result_22: ptr_row_r1[22];


				float f1_23 = (ptr_row_r0[23] + ptr_row_r2[23]) * 0.125;
				float f2_23 = (ptr_row_r1[22] + ptr_row_r1[24]) * 0.125;
				float f3_23 = ptr_row_r1[23] * 0.5;
				float result_23 = f1_23 + f2_23 + f3_23;
				ptr2_23[base_index1 + j] = (index23  < size0) ? result_23: ptr_row_r1[23];


				float f1_24 = (ptr_row_r0[24] + ptr_row_r2[24]) * 0.125;
				float f2_24 = (ptr_row_r1[23] + ptr_row_r1[25]) * 0.125;
				float f3_24 = ptr_row_r1[24] * 0.5;
				float result_24 = f1_24 + f2_24 + f3_24;
				ptr2_24[base_index1 + j] = (index24  < size0) ? result_24: ptr_row_r1[24];


				float f1_25 = (ptr_row_r0[25] + ptr_row_r2[25]) * 0.125;
				float f2_25 = (ptr_row_r1[24] + ptr_row_r1[26]) * 0.125;
				float f3_25 = ptr_row_r1[25] * 0.5;
				float result_25 = f1_25 + f2_25 + f3_25;
				ptr2_25[base_index1 + j] = (index25  < size0) ? result_25: ptr_row_r1[25];


				float f1_26 = (ptr_row_r0[26] + ptr_row_r2[26]) * 0.125;
				float f2_26 = (ptr_row_r1[25] + ptr_row_r1[27]) * 0.125;
				float f3_26 = ptr_row_r1[26] * 0.5;
				float result_26 = f1_26 + f2_26 + f3_26;
				ptr2_26[base_index1 + j] = (index26  < size0) ? result_26: ptr_row_r1[26];


				float f1_27 = (ptr_row_r0[27] + ptr_row_r2[27]) * 0.125;
				float f2_27 = (ptr_row_r1[26] + ptr_row_r1[28]) * 0.125;
				float f3_27 = ptr_row_r1[27] * 0.5;
				float result_27 = f1_27 + f2_27 + f3_27;
				ptr2_27[base_index1 + j] = (index27  < size0) ? result_27: ptr_row_r1[27];


				float f1_28 = (ptr_row_r0[28] + ptr_row_r2[28]) * 0.125;
				float f2_28 = (ptr_row_r1[27] + ptr_row_r1[29]) * 0.125;
				float f3_28 = ptr_row_r1[28] * 0.5;
				float result_28 = f1_28 + f2_28 + f3_28;
				ptr2_28[base_index1 + j] = (index28  < size0) ? result_28: ptr_row_r1[28];


				float f1_29 = (ptr_row_r0[29] + ptr_row_r2[29]) * 0.125;
				float f2_29 = (ptr_row_r1[28] + ptr_row_r1[30]) * 0.125;
				float f3_29 = ptr_row_r1[29] * 0.5;
				float result_29 = f1_29 + f2_29 + f3_29;
				ptr2_29[base_index1 + j] = (index29  < size0) ? result_29: ptr_row_r1[29];


				float f1_30 = (ptr_row_r0[30] + ptr_row_r2[30]) * 0.125;
				float f2_30 = (ptr_row_r1[29] + ptr_row_r1[31]) * 0.125;
				float f3_30 = ptr_row_r1[30] * 0.5;
				float result_30 = f1_30 + f2_30 + f3_30;
				ptr2_30[base_index1 + j] = (index30  < size0) ? result_30: ptr_row_r1[30];


				float f1_31 = (ptr_row_r0[31] + ptr_row_r2[31]) * 0.125;
				float f2_31 = (ptr_row_r1[30] + ptr_row_r1[32]) * 0.125;
				float f3_31 = ptr_row_r1[31] * 0.5;
				float result_31 = f1_31 + f2_31 + f3_31;
				ptr2_31[base_index1 + j] = (index31  < size0) ? result_31: ptr_row_r1[31];


				float f1_32 = (ptr_row_r0[32] + ptr_row_r2[32]) * 0.125;
				float f2_32 = (ptr_row_r1[31] + ptr_row_r1[33]) * 0.125;
				float f3_32 = ptr_row_r1[32] * 0.5;
				float result_32 = f1_32 + f2_32 + f3_32;
				ptr2_32[base_index1 + j] = (index32  < size0) ? result_32: ptr_row_r1[32];


				float f1_33 = (ptr_row_r0[33] + ptr_row_r2[33]) * 0.125;
				float f2_33 = (ptr_row_r1[32] + ptr_row_r1[34]) * 0.125;
				float f3_33 = ptr_row_r1[33] * 0.5;
				float result_33 = f1_33 + f2_33 + f3_33;
				ptr2_33[base_index1 + j] = (index33  < size0) ? result_33: ptr_row_r1[33];


				float f1_34 = (ptr_row_r0[34] + ptr_row_r2[34]) * 0.125;
				float f2_34 = (ptr_row_r1[33] + ptr_row_r1[35]) * 0.125;
				float f3_34 = ptr_row_r1[34] * 0.5;
				float result_34 = f1_34 + f2_34 + f3_34;
				ptr2_34[base_index1 + j] = (index34  < size0) ? result_34: ptr_row_r1[34];


				float f1_35 = (ptr_row_r0[35] + ptr_row_r2[35]) * 0.125;
				float f2_35 = (ptr_row_r1[34] + ptr_row_r1[36]) * 0.125;
				float f3_35 = ptr_row_r1[35] * 0.5;
				float result_35 = f1_35 + f2_35 + f3_35;
				ptr2_35[base_index1 + j] = (index35  < size0) ? result_35: ptr_row_r1[35];


				float f1_36 = (ptr_row_r0[36] + ptr_row_r2[36]) * 0.125;
				float f2_36 = (ptr_row_r1[35] + ptr_row_r1[37]) * 0.125;
				float f3_36 = ptr_row_r1[36] * 0.5;
				float result_36 = f1_36 + f2_36 + f3_36;
				ptr2_36[base_index1 + j] = (index36  < size0) ? result_36: ptr_row_r1[36];


				float f1_37 = (ptr_row_r0[37] + ptr_row_r2[37]) * 0.125;
				float f2_37 = (ptr_row_r1[36] + ptr_row_r1[38]) * 0.125;
				float f3_37 = ptr_row_r1[37] * 0.5;
				float result_37 = f1_37 + f2_37 + f3_37;
				ptr2_37[base_index1 + j] = (index37  < size0) ? result_37: ptr_row_r1[37];


				float f1_38 = (ptr_row_r0[38] + ptr_row_r2[38]) * 0.125;
				float f2_38 = (ptr_row_r1[37] + ptr_row_r1[39]) * 0.125;
				float f3_38 = ptr_row_r1[38] * 0.5;
				float result_38 = f1_38 + f2_38 + f3_38;
				ptr2_38[base_index1 + j] = (index38  < size0) ? result_38: ptr_row_r1[38];


				float f1_39 = (ptr_row_r0[39] + ptr_row_r2[39]) * 0.125;
				float f2_39 = (ptr_row_r1[38] + ptr_row_r1[40]) * 0.125;
				float f3_39 = ptr_row_r1[39] * 0.5;
				float result_39 = f1_39 + f2_39 + f3_39;
				ptr2_39[base_index1 + j] = (index39  < size0) ? result_39: ptr_row_r1[39];


				float f1_40 = (ptr_row_r0[40] + ptr_row_r2[40]) * 0.125;
				float f2_40 = (ptr_row_r1[39] + ptr_row_r1[41]) * 0.125;
				float f3_40 = ptr_row_r1[40] * 0.5;
				float result_40 = f1_40 + f2_40 + f3_40;
				ptr2_40[base_index1 + j] = (index40  < size0) ? result_40: ptr_row_r1[40];


				float f1_41 = (ptr_row_r0[41] + ptr_row_r2[41]) * 0.125;
				float f2_41 = (ptr_row_r1[40] + ptr_row_r1[42]) * 0.125;
				float f3_41 = ptr_row_r1[41] * 0.5;
				float result_41 = f1_41 + f2_41 + f3_41;
				ptr2_41[base_index1 + j] = (index41  < size0) ? result_41: ptr_row_r1[41];


				float f1_42 = (ptr_row_r0[42] + ptr_row_r2[42]) * 0.125;
				float f2_42 = (ptr_row_r1[41] + ptr_row_r1[43]) * 0.125;
				float f3_42 = ptr_row_r1[42] * 0.5;
				float result_42 = f1_42 + f2_42 + f3_42;
				ptr2_42[base_index1 + j] = (index42  < size0) ? result_42: ptr_row_r1[42];


				float f1_43 = (ptr_row_r0[43] + ptr_row_r2[43]) * 0.125;
				float f2_43 = (ptr_row_r1[42] + ptr_row_r1[44]) * 0.125;
				float f3_43 = ptr_row_r1[43] * 0.5;
				float result_43 = f1_43 + f2_43 + f3_43;
				ptr2_43[base_index1 + j] = (index43  < size0) ? result_43: ptr_row_r1[43];


				float f1_44 = (ptr_row_r0[44] + ptr_row_r2[44]) * 0.125;
				float f2_44 = (ptr_row_r1[43] + ptr_row_r1[45]) * 0.125;
				float f3_44 = ptr_row_r1[44] * 0.5;
				float result_44 = f1_44 + f2_44 + f3_44;
				ptr2_44[base_index1 + j] = (index44  < size0) ? result_44: ptr_row_r1[44];


				float f1_45 = (ptr_row_r0[45] + ptr_row_r2[45]) * 0.125;
				float f2_45 = (ptr_row_r1[44] + ptr_row_r1[46]) * 0.125;
				float f3_45 = ptr_row_r1[45] * 0.5;
				float result_45 = f1_45 + f2_45 + f3_45;
				ptr2_45[base_index1 + j] = (index45  < size0) ? result_45: ptr_row_r1[45];


				float f1_46 = (ptr_row_r0[46] + ptr_row_r2[46]) * 0.125;
				float f2_46 = (ptr_row_r1[45] + ptr_row_r1[47]) * 0.125;
				float f3_46 = ptr_row_r1[46] * 0.5;
				float result_46 = f1_46 + f2_46 + f3_46;
				ptr2_46[base_index1 + j] = (index46  < size0) ? result_46: ptr_row_r1[46];


				float f1_47 = (ptr_row_r0[47] + ptr_row_r2[47]) * 0.125;
				float f2_47 = (ptr_row_r1[46] + ptr_row_r1[48]) * 0.125;
				float f3_47 = ptr_row_r1[47] * 0.5;
				float result_47 = f1_47 + f2_47 + f3_47;
				ptr2_47[base_index1 + j] = (index47  < size0) ? result_47: ptr_row_r1[47];


				float f1_48 = (ptr_row_r0[48] + ptr_row_r2[48]) * 0.125;
				float f2_48 = (ptr_row_r1[47] + ptr_row_r1[49]) * 0.125;
				float f3_48 = ptr_row_r1[48] * 0.5;
				float result_48 = f1_48 + f2_48 + f3_48;
				ptr2_48[base_index1 + j] = (index48  < size0) ? result_48: ptr_row_r1[48];


				float f1_49 = (ptr_row_r0[49] + ptr_row_r2[49]) * 0.125;
				float f2_49 = (ptr_row_r1[48] + ptr_row_r1[50]) * 0.125;
				float f3_49 = ptr_row_r1[49] * 0.5;
				float result_49 = f1_49 + f2_49 + f3_49;
				ptr2_49[base_index1 + j] = (index49  < size0) ? result_49: ptr_row_r1[49];


				float f1_50 = (ptr_row_r0[50] + ptr_row_r2[50]) * 0.125;
				float f2_50 = (ptr_row_r1[49] + ptr_row_r1[51]) * 0.125;
				float f3_50 = ptr_row_r1[50] * 0.5;
				float result_50 = f1_50 + f2_50 + f3_50;
				ptr2_50[base_index1 + j] = (index50  < size0) ? result_50: ptr_row_r1[50];


				float f1_51 = (ptr_row_r0[51] + ptr_row_r2[51]) * 0.125;
				float f2_51 = (ptr_row_r1[50] + ptr_row_r1[52]) * 0.125;
				float f3_51 = ptr_row_r1[51] * 0.5;
				float result_51 = f1_51 + f2_51 + f3_51;
				ptr2_51[base_index1 + j] = (index51  < size0) ? result_51: ptr_row_r1[51];


				float f1_52 = (ptr_row_r0[52] + ptr_row_r2[52]) * 0.125;
				float f2_52 = (ptr_row_r1[51] + ptr_row_r1[53]) * 0.125;
				float f3_52 = ptr_row_r1[52] * 0.5;
				float result_52 = f1_52 + f2_52 + f3_52;
				ptr2_52[base_index1 + j] = (index52  < size0) ? result_52: ptr_row_r1[52];


				float f1_53 = (ptr_row_r0[53] + ptr_row_r2[53]) * 0.125;
				float f2_53 = (ptr_row_r1[52] + ptr_row_r1[54]) * 0.125;
				float f3_53 = ptr_row_r1[53] * 0.5;
				float result_53 = f1_53 + f2_53 + f3_53;
				ptr2_53[base_index1 + j] = (index53  < size0) ? result_53: ptr_row_r1[53];


				float f1_54 = (ptr_row_r0[54] + ptr_row_r2[54]) * 0.125;
				float f2_54 = (ptr_row_r1[53] + ptr_row_r1[55]) * 0.125;
				float f3_54 = ptr_row_r1[54] * 0.5;
				float result_54 = f1_54 + f2_54 + f3_54;
				ptr2_54[base_index1 + j] = (index54  < size0) ? result_54: ptr_row_r1[54];


				float f1_55 = (ptr_row_r0[55] + ptr_row_r2[55]) * 0.125;
				float f2_55 = (ptr_row_r1[54] + ptr_row_r1[56]) * 0.125;
				float f3_55 = ptr_row_r1[55] * 0.5;
				float result_55 = f1_55 + f2_55 + f3_55;
				ptr2_55[base_index1 + j] = (index55  < size0) ? result_55: ptr_row_r1[55];


				float f1_56 = (ptr_row_r0[56] + ptr_row_r2[56]) * 0.125;
				float f2_56 = (ptr_row_r1[55] + ptr_row_r1[57]) * 0.125;
				float f3_56 = ptr_row_r1[56] * 0.5;
				float result_56 = f1_56 + f2_56 + f3_56;
				ptr2_56[base_index1 + j] = (index56  < size0) ? result_56: ptr_row_r1[56];


				float f1_57 = (ptr_row_r0[57] + ptr_row_r2[57]) * 0.125;
				float f2_57 = (ptr_row_r1[56] + ptr_row_r1[58]) * 0.125;
				float f3_57 = ptr_row_r1[57] * 0.5;
				float result_57 = f1_57 + f2_57 + f3_57;
				ptr2_57[base_index1 + j] = (index57  < size0) ? result_57: ptr_row_r1[57];


				float f1_58 = (ptr_row_r0[58] + ptr_row_r2[58]) * 0.125;
				float f2_58 = (ptr_row_r1[57] + ptr_row_r1[59]) * 0.125;
				float f3_58 = ptr_row_r1[58] * 0.5;
				float result_58 = f1_58 + f2_58 + f3_58;
				ptr2_58[base_index1 + j] = (index58  < size0) ? result_58: ptr_row_r1[58];


				float f1_59 = (ptr_row_r0[59] + ptr_row_r2[59]) * 0.125;
				float f2_59 = (ptr_row_r1[58] + ptr_row_r1[60]) * 0.125;
				float f3_59 = ptr_row_r1[59] * 0.5;
				float result_59 = f1_59 + f2_59 + f3_59;
				ptr2_59[base_index1 + j] = (index59  < size0) ? result_59: ptr_row_r1[59];


				float f1_60 = (ptr_row_r0[60] + ptr_row_r2[60]) * 0.125;
				float f2_60 = (ptr_row_r1[59] + ptr_row_r1[61]) * 0.125;
				float f3_60 = ptr_row_r1[60] * 0.5;
				float result_60 = f1_60 + f2_60 + f3_60;
				ptr2_60[base_index1 + j] = (index60  < size0) ? result_60: ptr_row_r1[60];


				float f1_61 = (ptr_row_r0[61] + ptr_row_r2[61]) * 0.125;
				float f2_61 = (ptr_row_r1[60] + ptr_row_r1[62]) * 0.125;
				float f3_61 = ptr_row_r1[61] * 0.5;
				float result_61 = f1_61 + f2_61 + f3_61;
				ptr2_61[base_index1 + j] = (index61  < size0) ? result_61: ptr_row_r1[61];


				float f1_62 = (ptr_row_r0[62] + ptr_row_r2[62]) * 0.125;
				float f2_62 = (ptr_row_r1[61] + ptr_row_r1[63]) * 0.125;
				float f3_62 = ptr_row_r1[62] * 0.5;
				float result_62 = f1_62 + f2_62 + f3_62;
				ptr2_62[base_index1 + j] = (index62  < size0) ? result_62: ptr_row_r1[62];

				row_select = row_select + 1;
				row_select = (row_select >= 3) ? 0 : row_select;

				switch(row_select){
					case 0: {
						ptr_row_r0 = row_r0;
						ptr_row_r1 = row_r1;
						ptr_row_r2 = row_r2;
					}
					case 1: {
						ptr_row_r0 = row_r1;
						ptr_row_r1 = row_r2;
						ptr_row_r2 = row_r0;
					}
					case 2: {
						ptr_row_r0 = row_r2;
						ptr_row_r1 = row_r0;
						ptr_row_r2 = row_r1;
					}
				}


				base_index2 = base_index2 + row_block;

				ptr_row_r2[0]  = ptr1_0[base_index2 + j];
				ptr_row_r2[1]  = ptr1_1[base_index2 + j];
				ptr_row_r2[2]  = ptr1_2[base_index2 + j];
				ptr_row_r2[3]  = ptr1_3[base_index2 + j];
				ptr_row_r2[4]  = ptr1_4[base_index2 + j];
				ptr_row_r2[5]  = ptr1_5[base_index2 + j];
				ptr_row_r2[6]  = ptr1_6[base_index2 + j];
				ptr_row_r2[7]  = ptr1_7[base_index2 + j];
				ptr_row_r2[8]  = ptr1_8[base_index2 + j];
				ptr_row_r2[9]  = ptr1_9[base_index2 + j];
				ptr_row_r2[10]  = ptr1_10[base_index2 + j];
				ptr_row_r2[11]  = ptr1_11[base_index2 + j];
				ptr_row_r2[12]  = ptr1_12[base_index2 + j];
				ptr_row_r2[13]  = ptr1_13[base_index2 + j];
				ptr_row_r2[14]  = ptr1_14[base_index2 + j];
				ptr_row_r2[15]  = ptr1_15[base_index2 + j];
				ptr_row_r2[16]  = ptr1_16[base_index2 + j];
				ptr_row_r2[17]  = ptr1_17[base_index2 + j];
				ptr_row_r2[18]  = ptr1_18[base_index2 + j];
				ptr_row_r2[19]  = ptr1_19[base_index2 + j];
				ptr_row_r2[20]  = ptr1_20[base_index2 + j];
				ptr_row_r2[21]  = ptr1_21[base_index2 + j];
				ptr_row_r2[22]  = ptr1_22[base_index2 + j];
				ptr_row_r2[23]  = ptr1_23[base_index2 + j];
				ptr_row_r2[24]  = ptr1_24[base_index2 + j];
				ptr_row_r2[25]  = ptr1_25[base_index2 + j];
				ptr_row_r2[26]  = ptr1_26[base_index2 + j];
				ptr_row_r2[27]  = ptr1_27[base_index2 + j];
				ptr_row_r2[28]  = ptr1_28[base_index2 + j];
				ptr_row_r2[29]  = ptr1_29[base_index2 + j];
				ptr_row_r2[30]  = ptr1_30[base_index2 + j];
				ptr_row_r2[31]  = ptr1_31[base_index2 + j];
				ptr_row_r2[32]  = ptr1_32[base_index2 + j];
				ptr_row_r2[33]  = ptr1_33[base_index2 + j];
				ptr_row_r2[34]  = ptr1_34[base_index2 + j];
				ptr_row_r2[35]  = ptr1_35[base_index2 + j];
				ptr_row_r2[36]  = ptr1_36[base_index2 + j];
				ptr_row_r2[37]  = ptr1_37[base_index2 + j];
				ptr_row_r2[38]  = ptr1_38[base_index2 + j];
				ptr_row_r2[39]  = ptr1_39[base_index2 + j];
				ptr_row_r2[40]  = ptr1_40[base_index2 + j];
				ptr_row_r2[41]  = ptr1_41[base_index2 + j];
				ptr_row_r2[42]  = ptr1_42[base_index2 + j];
				ptr_row_r2[43]  = ptr1_43[base_index2 + j];
				ptr_row_r2[44]  = ptr1_44[base_index2 + j];
				ptr_row_r2[45]  = ptr1_45[base_index2 + j];
				ptr_row_r2[46]  = ptr1_46[base_index2 + j];
				ptr_row_r2[47]  = ptr1_47[base_index2 + j];
				ptr_row_r2[48]  = ptr1_48[base_index2 + j];
				ptr_row_r2[49]  = ptr1_49[base_index2 + j];
				ptr_row_r2[50]  = ptr1_50[base_index2 + j];
				ptr_row_r2[51]  = ptr1_51[base_index2 + j];
				ptr_row_r2[52]  = ptr1_52[base_index2 + j];
				ptr_row_r2[53]  = ptr1_53[base_index2 + j];
				ptr_row_r2[54]  = ptr1_54[base_index2 + j];
				ptr_row_r2[55]  = ptr1_55[base_index2 + j];
				ptr_row_r2[56]  = ptr1_56[base_index2 + j];
				ptr_row_r2[57]  = ptr1_57[base_index2 + j];
				ptr_row_r2[58]  = ptr1_58[base_index2 + j];
				ptr_row_r2[59]  = ptr1_59[base_index2 + j];
				ptr_row_r2[60]  = ptr1_60[base_index2 + j];
				ptr_row_r2[61]  = ptr1_61[base_index2 + j];
				ptr_row_r2[62]  = ptr1_62[base_index2 + j];
				ptr_row_r2[63]  = ptr1_63[base_index2 + j];

			};

		}


		switch(ram_select){
			case 0: {
					ptr1_0 =  u1_0;
					ptr1_1 =  u1_1;
					ptr1_2 =  u1_2;
					ptr1_3 =  u1_3;
					ptr1_4 =  u1_4;
					ptr1_5 =  u1_5;
					ptr1_6 =  u1_6;
					ptr1_7 =  u1_7;
					ptr1_8 =  u1_8;
					ptr1_9 =  u1_9;
					ptr1_10 = u1_10;
					ptr1_11 = u1_11;
					ptr1_12 = u1_12;
					ptr1_13 = u1_13;
					ptr1_14 = u1_14;
					ptr1_15 = u1_15;
					ptr1_16 = u1_16;
					ptr1_17 = u1_17;
					ptr1_18 = u1_18;
					ptr1_19 = u1_19;
					ptr1_20 = u1_20;
					ptr1_21 = u1_21;
					ptr1_22 = u1_22;
					ptr1_23 = u1_23;
					ptr1_24 = u1_24;
					ptr1_25 = u1_25;
					ptr1_26 = u1_26;
					ptr1_27 = u1_27;
					ptr1_28 = u1_28;
					ptr1_29 = u1_29;
					ptr1_30 = u1_30;
					ptr1_31 = u1_31;
					ptr1_32 = u1_32;
					ptr1_33 = u1_33;
					ptr1_34 = u1_34;
					ptr1_35 = u1_35;
					ptr1_36 = u1_36;
					ptr1_37 = u1_37;
					ptr1_38 = u1_38;
					ptr1_39 = u1_39;
					ptr1_40 = u1_40;
					ptr1_41 = u1_41;
					ptr1_42 = u1_42;
					ptr1_43 = u1_43;
					ptr1_44 = u1_44;
					ptr1_45 = u1_45;
					ptr1_46 = u1_46;
					ptr1_47 = u1_47;
					ptr1_48 = u1_48;
					ptr1_49 = u1_49;
					ptr1_50 = u1_50;
					ptr1_51 = u1_51;
					ptr1_52 = u1_52;
					ptr1_53 = u1_53;
					ptr1_54 = u1_54;
					ptr1_55 = u1_55;
					ptr1_56 = u1_56;
					ptr1_57 = u1_57;
					ptr1_58 = u1_58;
					ptr1_59 = u1_59;
					ptr1_60 = u1_60;
					ptr1_61 = u1_61;
					ptr1_62 = u1_62;
					ptr1_63 = u1_63;

					ptr2_0 =  u2_0;
					ptr2_1 =  u2_1;
					ptr2_2 =  u2_2;
					ptr2_3 =  u2_3;
					ptr2_4 =  u2_4;
					ptr2_5 =  u2_5;
					ptr2_6 =  u2_6;
					ptr2_7 =  u2_7;
					ptr2_8 =  u2_8;
					ptr2_9 =  u2_9;
					ptr2_10 = u2_10;
					ptr2_11 = u2_11;
					ptr2_12 = u2_12;
					ptr2_13 = u2_13;
					ptr2_14 = u2_14;
					ptr2_15 = u2_15;
					ptr2_16 = u2_16;
					ptr2_17 = u2_17;
					ptr2_18 = u2_18;
					ptr2_19 = u2_19;
					ptr2_20 = u2_20;
					ptr2_21 = u2_21;
					ptr2_22 = u2_22;
					ptr2_23 = u2_23;
					ptr2_24 = u2_24;
					ptr2_25 = u2_25;
					ptr2_26 = u2_26;
					ptr2_27 = u2_27;
					ptr2_28 = u2_28;
					ptr2_29 = u2_29;
					ptr2_30 = u2_30;
					ptr2_31 = u2_31;
					ptr2_32 = u2_32;
					ptr2_33 = u2_33;
					ptr2_34 = u2_34;
					ptr2_35 = u2_35;
					ptr2_36 = u2_36;
					ptr2_37 = u2_37;
					ptr2_38 = u2_38;
					ptr2_39 = u2_39;
					ptr2_40 = u2_40;
					ptr2_41 = u2_41;
					ptr2_42 = u2_42;
					ptr2_43 = u2_43;
					ptr2_44 = u2_44;
					ptr2_45 = u2_45;
					ptr2_46 = u2_46;
					ptr2_47 = u2_47;
					ptr2_48 = u2_48;
					ptr2_49 = u2_49;
					ptr2_50 = u2_50;
					ptr2_51 = u2_51;
					ptr2_52 = u2_52;
					ptr2_53 = u2_53;
					ptr2_54 = u2_54;
					ptr2_55 = u2_55;
					ptr2_56 = u2_56;
					ptr2_57 = u2_57;
					ptr2_58 = u2_58;
					ptr2_59 = u2_59;
					ptr2_60 = u2_60;
					ptr2_61 = u2_61;
					ptr2_62 = u2_62;
					ptr2_63 = u2_63;

				}

			case 1:
				{
					ptr1_0 =  u2_0;
					ptr1_1 =  u2_1;
					ptr1_2 =  u2_2;
					ptr1_3 =  u2_3;
					ptr1_4 =  u2_4;
					ptr1_5 =  u2_5;
					ptr1_6 =  u2_6;
					ptr1_7 =  u2_7;
					ptr1_8 =  u2_8;
					ptr1_9 =  u2_9;
					ptr1_10 = u2_10;
					ptr1_11 = u2_11;
					ptr1_12 = u2_12;
					ptr1_13 = u2_13;
					ptr1_14 = u2_14;
					ptr1_15 = u2_15;
					ptr1_16 = u2_16;
					ptr1_17 = u2_17;
					ptr1_18 = u2_18;
					ptr1_19 = u2_19;
					ptr1_20 = u2_20;
					ptr1_21 = u2_21;
					ptr1_22 = u2_22;
					ptr1_23 = u2_23;
					ptr1_24 = u2_24;
					ptr1_25 = u2_25;
					ptr1_26 = u2_26;
					ptr1_27 = u2_27;
					ptr1_28 = u2_28;
					ptr1_29 = u2_29;
					ptr1_30 = u2_30;
					ptr1_31 = u2_31;
					ptr1_32 = u2_32;
					ptr1_33 = u2_33;
					ptr1_34 = u2_34;
					ptr1_35 = u2_35;
					ptr1_36 = u2_36;
					ptr1_37 = u2_37;
					ptr1_38 = u2_38;
					ptr1_39 = u2_39;
					ptr1_40 = u2_40;
					ptr1_41 = u2_41;
					ptr1_42 = u2_42;
					ptr1_43 = u2_43;
					ptr1_44 = u2_44;
					ptr1_45 = u2_45;
					ptr1_46 = u2_46;
					ptr1_47 = u2_47;
					ptr1_48 = u2_48;
					ptr1_49 = u2_49;
					ptr1_50 = u2_50;
					ptr1_51 = u2_51;
					ptr1_52 = u2_52;
					ptr1_53 = u2_53;
					ptr1_54 = u2_54;
					ptr1_55 = u2_55;
					ptr1_56 = u2_56;
					ptr1_57 = u2_57;
					ptr1_58 = u2_58;
					ptr1_59 = u2_59;
					ptr1_60 = u2_60;
					ptr1_61 = u2_61;
					ptr1_62 = u2_62;
					ptr1_63 = u2_63;

					ptr2_0 =  u1_0;
					ptr2_1 =  u1_1;
					ptr2_2 =  u1_2;
					ptr2_3 =  u1_3;
					ptr2_4 =  u1_4;
					ptr2_5 =  u1_5;
					ptr2_6 =  u1_6;
					ptr2_7 =  u1_7;
					ptr2_8 =  u1_8;
					ptr2_9 =  u1_9;
					ptr2_10 = u1_10;
					ptr2_11 = u1_11;
					ptr2_12 = u1_12;
					ptr2_13 = u1_13;
					ptr2_14 = u1_14;
					ptr2_15 = u1_15;
					ptr2_16 = u1_16;
					ptr2_17 = u1_17;
					ptr2_18 = u1_18;
					ptr2_19 = u1_19;
					ptr2_20 = u1_20;
					ptr2_21 = u1_21;
					ptr2_22 = u1_22;
					ptr2_23 = u1_23;
					ptr2_24 = u1_24;
					ptr2_25 = u1_25;
					ptr2_26 = u1_26;
					ptr2_27 = u1_27;
					ptr2_28 = u1_28;
					ptr2_29 = u1_29;
					ptr2_30 = u1_30;
					ptr2_31 = u1_31;
					ptr2_32 = u1_32;
					ptr2_33 = u1_33;
					ptr2_34 = u1_34;
					ptr2_35 = u1_35;
					ptr2_36 = u1_36;
					ptr2_37 = u1_37;
					ptr2_38 = u1_38;
					ptr2_39 = u1_39;
					ptr2_40 = u1_40;
					ptr2_41 = u1_41;
					ptr2_42 = u1_42;
					ptr2_43 = u1_43;
					ptr2_44 = u1_44;
					ptr2_45 = u1_45;
					ptr2_46 = u1_46;
					ptr2_47 = u1_47;
					ptr2_48 = u1_48;
					ptr2_49 = u1_49;
					ptr2_50 = u1_50;
					ptr2_51 = u1_51;
					ptr2_52 = u1_52;
					ptr2_53 = u1_53;
					ptr2_54 = u1_54;
					ptr2_55 = u1_55;
					ptr2_56 = u1_56;
					ptr2_57 = u1_57;
					ptr2_58 = u1_58;
					ptr2_59 = u1_59;
					ptr2_60 = u1_60;
					ptr2_61 = u1_61;
					ptr2_62 = u1_62;
					ptr2_63 = u1_63;
				}
			}
		ram_select = ram_select + 1;
		ram_select = (ram_select >= 2) ? 0 : ram_select;

	}

	for(int i = 0; i < size1; i++){
		int base_index_local = (i) * row_block;
		int base_index_global = i * ((size0 >> 4) + 1);
		int select = 0;
		write_a_row: __attribute__((xcl_pipeline_loop))
		for(int j = 0; j < (size0 >> 4) + 1; j++){
			float16 tmp;
			int j_local = (j >> 2);
			switch(select) {
				case 0: {
							tmp.s0 = ptr1_0[base_index_local+j_local];
							tmp.s1 = ptr1_1[base_index_local+j_local];
							tmp.s2 = ptr1_2[base_index_local+j_local];
							tmp.s3 = ptr1_3[base_index_local+j_local];
							tmp.s4 = ptr1_4[base_index_local+j_local];
							tmp.s5 = ptr1_5[base_index_local+j_local];
							tmp.s6 = ptr1_6[base_index_local+j_local];
							tmp.s7 = ptr1_7[base_index_local+j_local];
							tmp.s8 = ptr1_8[base_index_local+j_local];
							tmp.s9 = ptr1_9[base_index_local+j_local];
							tmp.sa = ptr1_10[base_index_local+j_local];
							tmp.sb = ptr1_11[base_index_local+j_local];
							tmp.sc = ptr1_12[base_index_local+j_local];
							tmp.sd = ptr1_13[base_index_local+j_local];
							tmp.se = ptr1_14[base_index_local+j_local];
							tmp.sf = ptr1_15[base_index_local+j_local];
						}

				case 1: {
							tmp.s0 = ptr1_16[base_index_local+j_local];
							tmp.s1 = ptr1_17[base_index_local+j_local];
							tmp.s2 = ptr1_18[base_index_local+j_local];
							tmp.s3 = ptr1_19[base_index_local+j_local];
							tmp.s4 = ptr1_20[base_index_local+j_local];
							tmp.s5 = ptr1_21[base_index_local+j_local];
							tmp.s6 = ptr1_22[base_index_local+j_local];
							tmp.s7 = ptr1_23[base_index_local+j_local];
							tmp.s8 = ptr1_24[base_index_local+j_local];
							tmp.s9 = ptr1_25[base_index_local+j_local];
							tmp.sa = ptr1_26[base_index_local+j_local];
							tmp.sb = ptr1_27[base_index_local+j_local];
							tmp.sc = ptr1_28[base_index_local+j_local];
							tmp.sd = ptr1_29[base_index_local+j_local];
							tmp.se = ptr1_30[base_index_local+j_local];
							tmp.sf = ptr1_31[base_index_local+j_local];
						}

				case 2: {
							tmp.s0 = ptr1_32[base_index_local+j_local];
							tmp.s1 = ptr1_33[base_index_local+j_local];
							tmp.s2 = ptr1_34[base_index_local+j_local];
							tmp.s3 = ptr1_35[base_index_local+j_local];
							tmp.s4 = ptr1_36[base_index_local+j_local];
							tmp.s5 = ptr1_37[base_index_local+j_local];
							tmp.s6 = ptr1_38[base_index_local+j_local];
							tmp.s7 = ptr1_39[base_index_local+j_local];
							tmp.s8 = ptr1_40[base_index_local+j_local];
							tmp.s9 = ptr1_41[base_index_local+j_local];
							tmp.sa = ptr1_42[base_index_local+j_local];
							tmp.sb = ptr1_43[base_index_local+j_local];
							tmp.sc = ptr1_44[base_index_local+j_local];
							tmp.sd = ptr1_45[base_index_local+j_local];
							tmp.se = ptr1_46[base_index_local+j_local];
							tmp.sf = ptr1_47[base_index_local+j_local];
						}

				case 3: {
							tmp.s0 = ptr1_48[base_index_local+j_local];
							tmp.s1 = ptr1_49[base_index_local+j_local];
							tmp.s2 = ptr1_50[base_index_local+j_local];
							tmp.s3 = ptr1_51[base_index_local+j_local];
							tmp.s4 = ptr1_52[base_index_local+j_local];
							tmp.s5 = ptr1_53[base_index_local+j_local];
							tmp.s6 = ptr1_54[base_index_local+j_local];
							tmp.s7 = ptr1_55[base_index_local+j_local];
							tmp.s8 = ptr1_56[base_index_local+j_local];
							tmp.s9 = ptr1_57[base_index_local+j_local];
							tmp.sa = ptr1_58[base_index_local+j_local];
							tmp.sb = ptr1_59[base_index_local+j_local];
							tmp.sc = ptr1_60[base_index_local+j_local];
							tmp.sd = ptr1_61[base_index_local+j_local];
							tmp.se = ptr1_62[base_index_local+j_local];
							tmp.sf = ptr1_63[base_index_local+j_local];
						}
			}
			select = select + 1;
			select = (select >= 4) ? 0 : select;
			arg0[base_index_global + j] = tmp;
		}

	}
}

