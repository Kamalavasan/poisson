//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

//user function

/*__attribute__((always_inline)) void poisson_kernel_update(const ptr_double u2,
		ptr_double u) {
	OPS_ACCS(u, 0,0) = OPS_ACCS(u2, 0,0);
}*/

__kernel __attribute__ ((reqd_work_group_size(1, 1, 1)))
__kernel __attribute__((vec_type_hint(double)))
__kernel __attribute__((xcl_zero_global_work_offset))

__kernel void ops_poisson_kernel_update(
		__global const double* restrict arg0,
		__global double* restrict arg1,
		const int base0,
		const int base1,
		const int size0,
		const int size1,
		const int xdim0_poisson_kernel_update,
		const int xdim1_poisson_kernel_update){

		int X, Y, tile_per_col, tile_per_row, Y_g, index;

		__attribute__((xcl_pipeline_workitems(1))){
			X = (size0/OPS_block_size_x +1)*OPS_block_size_x;
			Y = (size1/OPS_block_size_y +1)*OPS_block_size_y;

			tile_per_col = X/OPS_block_size_y;
			tile_per_row = Y/OPS_block_size_x;
		}


		local double tile[OPS_block_size_y][OPS_block_size_x];
		rd_loop_i: for(int i = 0; i < tile_per_col; ++i) {
			rd_loop_j: for (int j = 0; j < tile_per_row; ++j) {
				__attribute__((xcl_loop_tripcount(OPS_block_size_y, OPS_block_size_y)))
				rd_buf_loop_m: for (int m = 0; m < OPS_block_size_y; ++m) {
					__attribute__((xcl_pipeline_workitems(1))){
						Y_g = i*OPS_block_size_y+m;
						index = base0 + (j*OPS_block_size_x) + (Y_g) * xdim0_poisson_kernel_update;
					}
					__attribute__((xcl_pipeline_loop(1)))
					__attribute__((xcl_loop_tripcount(OPS_block_size_x, OPS_block_size_x)))
					rd_buf_loop_n: for (int n = 0; n < OPS_block_size_x; ++n) {
						int X_g = j*OPS_block_size_x+n;
						// should burst TILE_WIDTH in WORD beat
						tile[m][n] = arg0[index+n];
					}
				}
				__attribute__((xcl_loop_tripcount(OPS_block_size_y, OPS_block_size_y)))
				rd_loop_m: for (int m = 0; m < OPS_block_size_y; ++m) {
					__attribute__((xcl_pipeline_workitems(1))){
						Y_g = i*OPS_block_size_y+m;
						index = base0 + (j*OPS_block_size_x) + (Y_g) * xdim0_poisson_kernel_update;
					}
					__attribute__((xcl_pipeline_loop(1)))
					__attribute__((xcl_loop_tripcount(OPS_block_size_x, OPS_block_size_x)))
					rd_loop_n: for (int n = 0; n < OPS_block_size_x; ++n) {
						int X_g = j*OPS_block_size_x+n;
						//if(X_g < size0 && Y_g < size1)
							arg1[index+n] = X_g < size0 && Y_g < size1 ? tile[m][n]: arg1[index+n];
					}
				}
			}
		}

}
