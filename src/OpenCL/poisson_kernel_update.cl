//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"


#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

//user function

/*__attribute__((always_inline)) void poisson_kernel_update(const ptr_double u2,
		ptr_double u) {
	OPS_ACCS(u, 0,0) = OPS_ACCS(u2, 0,0);
}*/


#define SHIFT_BITS 4

__constant int c_min_size = (1024*64)/64;
__constant int c_max_size = (1024*1024*1024)/64;
__kernel __attribute__ ((reqd_work_group_size(1, 1, 1)))


__kernel void ops_poisson_kernel_update(
		__global const float16* restrict arg0,
		__global float16* restrict arg1,
		const int base0,
		const int base1,
		const int size0,
		const int size1,
		const int xdim0_poisson_kernel_update,
		const int xdim1_poisson_kernel_update){




	int base_index0, base_index1, end_index, adjust;

	for(int i  = 0; i < size1; i++){
		__attribute__((xcl_pipeline_workitems)){
			adjust = (base0 != 0 ?  1 : 0);
			base_index0 = (base0 + i* xdim0_poisson_kernel_update -adjust) >> SHIFT_BITS;
			base_index1 = (base1 + i* xdim1_poisson_kernel_update -adjust) >> SHIFT_BITS;
			end_index = (xdim0_poisson_kernel_update >> SHIFT_BITS);
		}
		__attribute__((xcl_pipeline_loop))
		__attribute__((xcl_loop_tripcount(c_min_size, c_max_size)))
		for(int j = 0; j < (end_index); j++){
			float16 temp = arg0[base_index0 +j];
			arg1[base_index1 +j] = temp;

		}

//		// initial row handle
//		float16 tmp0_f16, tmp1_f16;
//		float16 tmp_wr;
//		tmp0_f16 = arg0[base_index0];
//		tmp1_f16 = arg1[base_index1];
//		tmp_wr = (float16){tmp1_f16.s0, tmp0_f16.s1, tmp0_f16.s2, tmp0_f16.s3, tmp0_f16.s4, tmp0_f16.s5, tmp0_f16.s6, tmp0_f16.s7,
//			tmp0_f16.s8, tmp0_f16.s9, tmp0_f16.sa, tmp0_f16.sb, tmp0_f16.sc, tmp0_f16.sd, tmp0_f16.se, tmp0_f16.sf};
//		arg1[base_index1] = adjust? tmp_wr: tmp0_f16;
//
//
//		// end row handle
//		tmp0_f16 = arg0[base_index0 + end_index -1];
//		float arr0_f16[16] = {tmp0_f16.s0, tmp0_f16.s1, tmp0_f16.s2, tmp0_f16.s3, tmp0_f16.s4, tmp0_f16.s5, tmp0_f16.s6, tmp0_f16.s7,
//							tmp0_f16.s8, tmp0_f16.s9, tmp0_f16.sa, tmp0_f16.sb, tmp0_f16.sc, tmp0_f16.sd, tmp0_f16.se, tmp0_f16.sf};
//
//		tmp1_f16 = arg1[base_index1 + end_index -1];
//		float arr1_f16[16] = {tmp1_f16.s0, tmp1_f16.s1, tmp1_f16.s2, tmp1_f16.s3, tmp1_f16.s4, tmp1_f16.s5, tmp1_f16.s6, tmp1_f16.s7,
//									tmp1_f16.s8, tmp1_f16.s9, tmp1_f16.sa, tmp1_f16.sb, tmp1_f16.sc, tmp1_f16.sd, tmp1_f16.se, tmp1_f16.sf};
//
//		float arr_wr_16[16];
//		__attribute__((opencl_unroll_hint(16)))
//		for (int p = 0; p < 16; p++){
//			if(p >= ((size0+1) & 0xf)){
//				arr_wr_16[p] = arr1_f16[p];
//			} else {
//				arr_wr_16[p] = arr0_f16[p];
//			}
//		}
//
//		tmp_wr = (float16){ arr_wr_16[0], arr_wr_16[1], arr_wr_16[2], arr_wr_16[3],
//			arr_wr_16[4], arr_wr_16[5], arr_wr_16[6], arr_wr_16[7],
//			arr_wr_16[8], arr_wr_16[9], arr_wr_16[10], arr_wr_16[11],
//			arr_wr_16[12], arr_wr_16[13], arr_wr_16[14], arr_wr_16[15]};
//
//		arg1[base_index1 + end_index -1] = (adjust ? tmp_wr : tmp0_f16);
//
	}

}
