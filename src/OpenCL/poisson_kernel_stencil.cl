//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

//user function

#define BURST_LEN_RD 130
#define BURST_LEN_WR 128

//__kernel __attribute__ ((reqd_work_group_size(1, 1, 1)))
//__kernel __attribute__ ((reqd_work_group_size(OPS_block_size_x, OPS_block_size_y, 1)))
//__kernel __attribute__((vec_type_hint(double)))
//__kernel __attribute__((xcl_zero_global_work_offset))

__kernel void ops_poisson_kernel_stencil(
		__global const double* restrict arg0,
		__global double* restrict arg1,
		const int base0,
		const int base1,
		const int size0,
		const int size1,
		const int xdim0_poisson_kernel_stencil,
		const int xdim1_poisson_kernel_stencil){



//	int idx_y = get_global_id(1);
//	int idx_x = get_global_id(0);

	int beat_no = size0 >> 7;


	local double mem_rd1[BURST_LEN_RD];
	local double mem_rd2[BURST_LEN_RD];
	local double mem_rd3[BURST_LEN_RD];

	local double mem_wr[BURST_LEN_WR];


	double last_element	= 0;

	__attribute__((xcl_dataflow)){
		for(int i  = 0; i < size1; i++){
			for(int j = 0; j < beat_no; j++){

				int base_index1 = base0 + (j<<7) + (i-1)* xdim0_poisson_kernel_stencil -1;
				int base_index2 = base0 + (j<<7) + (i) * xdim0_poisson_kernel_stencil - 1;
				int base_index3 = base0 + (j<<7) + (i+1)* xdim0_poisson_kernel_stencil -1;

				int base_index0 = base1 + (j<<7) + i* xdim1_poisson_kernel_stencil;

				v1_rd: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < BURST_LEN_RD; k++){
					mem_rd1[k] = arg0[base_index1 +k];
				}

				v2_rd: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < BURST_LEN_RD; k++){
					mem_rd2[k] = arg0[base_index2 +k];
				}

				v3_rd: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < BURST_LEN_RD; k++){
					mem_rd3[k] = arg0[base_index3 +k];
				}

				process: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < k < BURST_LEN_WR; k++){
					mem_wr[k] = (
							( mem_rd2[k] - 2.0f * mem_rd2[k+1] + mem_rd2[k+2] )*0.125f

							+( mem_rd1[k+1] - 2.0f*mem_rd2[k+1] + mem_rd3[k+1] )*0.125f

							+ mem_rd2[k+1]
							);
				}

				v1_wr: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < BURST_LEN_WR; k++){
					arg1[base_index0 +k] = mem_wr[k];
				}

			}
		}

		for(int i  = 0; i < size1; i++){

				int base_index1 = base0 + (beat_no << 7) + (i-1)* xdim0_poisson_kernel_stencil -1;
				int base_index2 = base0 + (beat_no << 7) + (i) * xdim0_poisson_kernel_stencil - 1;
				int base_index3 = base0 + (beat_no << 7) + (i+1)* xdim0_poisson_kernel_stencil -1;

				int base_index0 = base1 + (beat_no << 7) + i * xdim1_poisson_kernel_stencil;

				bv1_rd: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < ((size0 & 0x7f) + 2); k++){
					mem_rd1[k] = arg0[base_index1 +k];
				}

				bv2_rd: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < ((size0 & 0x7f) + 2); k++){
					mem_rd2[k] = arg0[base_index2 +k];
				}

				bv3_rd: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < ((size0 & 0x7f) + 2); k++){
					mem_rd3[k] = arg0[base_index3 +k];
				}

				bprocess: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < (size0 & 0x7f); k++){
					mem_wr[k] = (
							( mem_rd2[k] - 2.0f * mem_rd2[k+1] + mem_rd2[k+2] )*0.125f

							+( mem_rd1[k+1] - 2.0f*mem_rd2[k+1] + mem_rd3[k+1] )*0.125f

							+ mem_rd2[k+1]
							);
				}

				bv1_wr: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < (size0 & 0x7f); k++){
					arg1[base_index0 +k] = mem_wr[k];
				}
		}
	}

//	if (idx_x < size0 && idx_y < size1) {
//		const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_poisson_kernel_stencil], xdim0_poisson_kernel_stencil};
//		ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_poisson_kernel_stencil], xdim1_poisson_kernel_stencil};
//
//		/*poisson_kernel_stencil(ptr0,
//		              ptr1);*/
//
//		OPS_ACCS(ptr1, 0,0) = ((OPS_ACCS(ptr0, -1,0)-2.0f*OPS_ACCS(ptr0, 0,0)+OPS_ACCS(ptr0, 1,0))*0.125f
//				+ (OPS_ACCS(ptr0, 0,-1)-2.0f*OPS_ACCS(ptr0, 0,0)+OPS_ACCS(ptr0, 0,1))*0.125f
//				+ OPS_ACCS(ptr0, 0,0));
//	}

}
