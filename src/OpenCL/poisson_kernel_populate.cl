//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

#define BURST_LEN 256
#define SHIFT_BITS 8

__kernel __attribute__ ((reqd_work_group_size(1, 1, 1)))

__kernel void ops_poisson_kernel_populate(
		const int arg0,
		const int arg1,
		__global double* restrict arg3,
		__global double* restrict arg4,
		__global double* restrict arg5,
		const double dx,
		const double dy,
		const int base3,
		const int base4,
		const int base5,
		int arg_idx0, int arg_idx1,
		const int size0,
		const int size1,
		const int xdim3_poisson_kernel_populate,
		const int xdim4_poisson_kernel_populate,
		const int xdim5_poisson_kernel_populate){



		int beat_no = (size0 >> SHIFT_BITS) + 1;
		local double mem3[BURST_LEN];
		local double mem4[BURST_LEN];
		local double mem5[BURST_LEN];

		int arg_idx[2];
		double x, y;


		for(int i  = 0; i < size1; i++){
			for(int j = 0; j < beat_no; j++){
				int base_index3 = base3 + (j<<SHIFT_BITS) + i* xdim3_poisson_kernel_populate;
				int base_index4 = base4 + (j<<SHIFT_BITS) + i* xdim4_poisson_kernel_populate;
				int base_index5 = base5 + (j<<SHIFT_BITS) + i* xdim5_poisson_kernel_populate;

				int loop_limit = (j < (beat_no - 1)) ? BURST_LEN : size0 & (BURST_LEN-1);

				arg_idx[1] = arg_idx1+ i;


				v1_rd: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < loop_limit; k++){
					arg_idx[0] = arg_idx0+ (j<<SHIFT_BITS) + k;
					x = dx * (double)(arg_idx[0]+arg0);
					y = dy * (double)(arg_idx[1]+arg1);
					mem3[k] = myfun(sin(M_PI*x),cos(2.0*M_PI*y))-1.0;
					mem4[k] = -5.0*M_PI*M_PI*sin(M_PI*x)*cos(2.0*M_PI*y);
					mem5[k] = sin(M_PI*x)*cos(2.0*M_PI*y);
				}
				v1_wr3: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < loop_limit; k++){
					arg3[base_index3 +k] = mem3[k];
				}
				v1_wr4: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < loop_limit; k++){
					arg4[base_index4 +k] = mem4[k];
				}
				v1_wr5: __attribute__((xcl_pipeline_loop))
				for(int k = 0; k < loop_limit; k++){
					arg5[base_index5 +k] = mem5[k];
				}
			}

		}
}
