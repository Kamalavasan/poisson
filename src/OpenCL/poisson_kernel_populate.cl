//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

#define x_len 1
#define y_len 1

//user function

/*__attribute__((always_inline)) void poisson_kernel_populate(const int *dispx,
		const int *dispy,
		const int *idx,
		ptr_double u,
		ptr_double f,
		ptr_double ref, const double dx, const double dy)
{
	double x = dx * (double)(idx[0]+dispx[0]);
	double y = dy * (double)(idx[1]+dispy[0]);

	OPS_ACCS(u, 0,0) = myfun(sin(M_PI*x),cos(2.0*M_PI*y))-1.0;
	OPS_ACCS(f, 0,0) = -5.0*M_PI*M_PI*sin(M_PI*x)*cos(2.0*M_PI*y);
	OPS_ACCS(ref, 0,0) = sin(M_PI*x)*cos(2.0*M_PI*y);
}*/

__kernel __attribute__ ((reqd_work_group_size(32, 32, 1)))
__kernel __attribute__((vec_type_hint(double)))

__kernel void ops_poisson_kernel_populate(
		const int arg0,
		const int arg1,
		__global double* restrict arg3,
		__global double* restrict arg4,
		__global double* restrict arg5,
		const double dx,
		const double dy,
		const int base3,
		const int base4,
		const int base5,
		int arg_idx0, int arg_idx1,
		const int size0,
		const int size1,
		const int xdim3_poisson_kernel_populate,
		const int xdim4_poisson_kernel_populate,
		const int xdim5_poisson_kernel_populate){


		int idx_y, idx_x;

		__attribute__((xcl_pipeline_workitems)){
			idx_y = get_global_id(1);
			idx_x = get_global_id(0);
		}

		int arg_idx[2];
		__attribute__((xcl_pipeline_workitems)){
			arg_idx[0] = arg_idx0+ idx_x;
			arg_idx[1] = arg_idx1+ idx_y;
		}

		int index3;
		int index4;
		int index5;

		__attribute__((xcl_pipeline_workitems)){
			index3 = base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_poisson_kernel_populate;
			index4 = base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_poisson_kernel_populate;
			index5 = base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_poisson_kernel_populate;
		}

		if (idx_x < size0 && idx_y < size1) {

//				ptr_double ptr3 = { &arg3[index3], xdim3_poisson_kernel_populate};
//				ptr_double ptr4 = { &arg4[index4], xdim4_poisson_kernel_populate};
//				ptr_double ptr5 = { &arg5[index5], xdim5_poisson_kernel_populate};

				double x = dx * (double)(arg_idx[0]+arg0);
				double y = dy * (double)(arg_idx[1]+arg1);

			__attribute__((xcl_pipeline_workitems)){
//				OPS_ACCS(ptr3, 0,0) = myfun(sin(M_PI*x),cos(2.0*M_PI*y))-1.0;
//				OPS_ACCS(ptr4, 0,0) = -5.0*M_PI*M_PI*sin(M_PI*x)*cos(2.0*M_PI*y);
//				OPS_ACCS(ptr5, 0,0) = sin(M_PI*x)*cos(2.0*M_PI*y);
				double sin_x = sin(M_PI*x);
				double cos_y = cos(2.0*M_PI*y);


				arg3[index3] = myfun(sin_x,cos_y)-1.0;
				arg4[index4] = -5.0*M_PI*M_PI*sin_x*cos_y;
				arg5[index5] = sin_x*cos_y;
		    }



		  }



//	local double mem_xy3[x_len * y_len];
//	local double mem_xy4[x_len * y_len];
//	local double mem_xy5[x_len * y_len];
//
//
//	local int ptr_xy3[x_len * y_len];
//	local int ptr_xy4[x_len * y_len];
//	local int ptr_xy5[x_len * y_len];
//
//	__attribute__((xcl_pipeline_loop))
//	__attribute__((opencl_unroll_hint(2)))
//	for(unsigned char j = 0; j < y_len; j++){
//		__attribute__((xcl_pipeline_workitems)) {
//			int y_offset = j * y_len;
//			int offset3 = base3 + (idx_x* x_len) + (idx_y * y_len + j) * xdim4_poisson_kernel_populate;
//			int offset4 = base4 + (idx_x* x_len) + (idx_y * y_len + j) * xdim4_poisson_kernel_populate;
//			int offset5 = base5 + (idx_x* x_len) + (idx_y * y_len + j) * xdim5_poisson_kernel_populate;
//
//
////			__attribute__((xcl_pipeline_loop))
////			__attribute__((opencl_unroll_hint(1)))
//			for(unsigned char i = 0; i < x_len; i++){
//				int arg_idx[2];
//				arg_idx[0] = arg_idx0+ idx_x * x_len + i;
//				arg_idx[1] = arg_idx1+ idx_y * y_len + j;
//
//				if (idx_x*x_len+i < size0 && idx_y*y_len+j < size1) {
//
//					double x = dx * (double)(arg_idx[0]+arg0);
//					double y = dy * (double)(arg_idx[1]+arg1);
//
//					mem_xy3[y_offset + i] = myfun(sin(M_PI*x),cos(2.0*M_PI*y))-1.0;
//					mem_xy4[y_offset + i] = -5.0*M_PI*M_PI*sin(M_PI*x)*cos(2.0*M_PI*y);
//					mem_xy5[y_offset + i] = sin(M_PI*x)*cos(2.0*M_PI*y);
//
//					ptr_xy3[y_offset + i] = offset3 + i;
//					ptr_xy4[y_offset + i] = offset4 + i;
//					ptr_xy5[y_offset + i] = offset5 + i;
//				}
//			}
//		}
//	}
//
//	__attribute__((xcl_pipeline_workitems)){
//
//		for(unsigned char j = 0; j < y_len; j++){
//			__attribute__((xcl_pipeline_workitems)) {
//
//			int y_offset = j * y_len;
//			__attribute__((xcl_pipeline_loop))
//			__attribute__((opencl_unroll_hint(1)))
//			for(unsigned char i = 0; i < x_len; i++){
//				ptr_double ptr3 = { &arg3[ptr_xy3[y_offset + i]], xdim3_poisson_kernel_populate};
//				OPS_ACCS(ptr3, 0,0) = mem_xy3[y_offset + i];
//				}
//			}
//		}
//
//		for(unsigned char j = 0; j < y_len; j++){
//			__attribute__((xcl_pipeline_workitems)) {
//
//			int y_offset = j * y_len;
//			__attribute__((xcl_pipeline_loop))
//			__attribute__((opencl_unroll_hint(1)))
//			for(unsigned char i = 0; i < x_len; i++){
//				ptr_double ptr4 = { &arg4[ptr_xy4[y_offset + i]], xdim4_poisson_kernel_populate};
//				OPS_ACCS(ptr4, 0,0) = mem_xy3[y_offset + i];
//				}
//			}
//		}
//
//		for(unsigned char j = 0; j < y_len; j++){
//			__attribute__((xcl_pipeline_workitems)) {
//
//			int y_offset = j * y_len;
//			__attribute__((xcl_pipeline_loop))
//			__attribute__((opencl_unroll_hint(1)))
//			for(unsigned char i = 0; i < x_len; i++){
//				ptr_double ptr5 = { &arg5[ptr_xy3[y_offset + i]], xdim5_poisson_kernel_populate};
//				OPS_ACCS(ptr5, 0,0) = mem_xy5[y_offset + i];
//				}
//			}
//		}
//	}

}
