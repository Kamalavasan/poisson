//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "user_types.h"
#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

#define x_len 1
#define y_len 1

//user function

/*__attribute__((always_inline)) void poisson_kernel_populate(const int *dispx,
		const int *dispy,
		const int *idx,
		ptr_double u,
		ptr_double f,
		ptr_double ref, const double dx, const double dy)
{
	double x = dx * (double)(idx[0]+dispx[0]);
	double y = dy * (double)(idx[1]+dispy[0]);

	OPS_ACCS(u, 0,0) = myfun(sin(M_PI*x),cos(2.0*M_PI*y))-1.0;
	OPS_ACCS(f, 0,0) = -5.0*M_PI*M_PI*sin(M_PI*x)*cos(2.0*M_PI*y);
	OPS_ACCS(ref, 0,0) = sin(M_PI*x)*cos(2.0*M_PI*y);
}*/

__kernel __attribute__ ((reqd_work_group_size(8, 1, 1)))
__kernel __attribute__((vec_type_hint(double)))
__kernel __attribute__((xcl_zero_global_work_offset))

__kernel void ops_poisson_kernel_populate(
		const int arg0,
		const int arg1,
		__global double* restrict arg3,
		__global double* restrict arg4,
		__global double* restrict arg5,
		const double dx,
		const double dy,
		const int base3,
		const int base4,
		const int base5,
		int arg_idx0, int arg_idx1,
		const int size0,
		const int size1,
		const int xdim3_poisson_kernel_populate,
		const int xdim4_poisson_kernel_populate,
		const int xdim5_poisson_kernel_populate){


		int idx_y, idx_x;

		__attribute__((xcl_pipeline_workitems)){
			idx_y = get_global_id(1);
			idx_x = get_global_id(0);
		}

		int arg_idx[2];
		__attribute__((xcl_pipeline_workitems)){
			arg_idx[0] = arg_idx0+ idx_x;
			arg_idx[1] = arg_idx1+ idx_y;
		}

		int index3;
		int index4;
		int index5;

		__attribute__((xcl_pipeline_workitems)){
			index3 = base3 + idx_y * xdim3_poisson_kernel_populate;
			index4 = base4 + idx_y * xdim4_poisson_kernel_populate;
			index5 = base5 + idx_y * xdim5_poisson_kernel_populate;
		}

		if (idx_x < size0 && idx_y < size1) {
//
//			__global double* restrict ptr3 = &arg3[index];
//			__global double* restrict ptr4 = &arg4[index];
//			__global double* restrict ptr5 = &arg5[index];

				double x = dx * (double)(arg_idx[0]+arg0);
				double y = dy * (double)(arg_idx[1]+arg1);


				double f3, f4, f5;
				__attribute__((xcl_dataflow)){
					f3 = myfun(sin(M_PI*x),cos(2.0*M_PI*y))-1.0;
					f4 = -5.0*M_PI*M_PI*sin(M_PI*x)*cos(2.0*M_PI*y);
					f5 = sin(M_PI*x)*cos(2.0*M_PI*y);
				}

			/*__attribute__((xcl_pipeline_workitems))*/{

				arg3[index3+idx_x] = f3;
				arg4[index4+idx_x] = f4;
				arg5[index5+idx_x] = f5;
		    }

		  }

}
