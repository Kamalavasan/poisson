//
// auto-generated by ops.py//

// header
#define OPS_API 2
#define OPS_3D
#include "ops_lib_cpp.h"
#include "ops_opencl_rt_support.h"
#include "stdio.h"
#include "stdlib.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
extern float dx;
extern float dy;
extern float dz;
extern int nx;
extern int ny;
extern int nz;
extern int pml_width;
extern int half;
extern int order;

void ops_init_backend() {}

// this needs to be a platform specific copy symbol to device function
void ops_decl_const_char(int dim, char const *type, int typeSize, char *dat,
                         char const *name) {
  cl_int ret = 0;
  if (OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant == NULL) {
    OPS_instance::getOPSInstance()->opencl_instance->OPS_opencl_core.constant =
        (cl_mem *)malloc((9) * sizeof(cl_mem));
    for (int i = 0; i < 9; i++) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[i] = NULL;
    }
  }
  if (!strcmp(name, "dx")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[0] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[0] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[0],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "dy")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[1] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[1] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[1],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "dz")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[2] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[2] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[2],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "nx")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[3] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[3] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[3],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "ny")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[4] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[4] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[4],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "nz")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[5] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[5] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[5],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "pml_width")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[6] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[6] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[6],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "half")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[7] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[7] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[7],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else if (!strcmp(name, "order")) {
    if (OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[8] == NULL) {
      OPS_instance::getOPSInstance()
          ->opencl_instance->OPS_opencl_core.constant[8] =
          clCreateBuffer(OPS_instance::getOPSInstance()
                             ->opencl_instance->OPS_opencl_core.context,
                         CL_MEM_READ_ONLY, dim * typeSize, NULL, &ret);
      clSafeCall(ret);
    }
    // Write the new constant to the memory of the device
    clSafeCall(clEnqueueWriteBuffer(
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.command_queue,
        OPS_instance::getOPSInstance()
            ->opencl_instance->OPS_opencl_core.constant[8],
        CL_TRUE, 0, dim * typeSize, (void *)dat, 0, NULL, NULL));
    clSafeCall(clFlush(OPS_instance::getOPSInstance()
                           ->opencl_instance->OPS_opencl_core.command_queue));
    clSafeCall(clFinish(OPS_instance::getOPSInstance()
                            ->opencl_instance->OPS_opencl_core.command_queue));
  } else {
    printf("error: unknown const name\n");
    exit(1);
  }
}

void buildOpenCLKernels() {
  static bool isbuilt = false;

  if (!isbuilt) {
    // clSafeCall( clUnloadCompiler() );

    OPS_instance::getOPSInstance()->opencl_instance->OPS_opencl_core.n_kernels =
        5;
    OPS_instance::getOPSInstance()->opencl_instance->OPS_opencl_core.kernel =
        (cl_kernel *)malloc(5 * sizeof(cl_kernel));
  }
  isbuilt = true;
}

// user kernel files
#include "calc_ytemp2_kernel_opencl_kernel.cpp"
#include "calc_ytemp_kernel_opencl_kernel.cpp"
#include "fd3d_pml_kernel_opencl_kernel.cpp"
#include "final_update_kernel_opencl_kernel.cpp"
#include "rtm_kernel_populate_opencl_kernel.cpp"
