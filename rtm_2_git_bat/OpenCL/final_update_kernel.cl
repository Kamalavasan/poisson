//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64 : enable

#define OPS_3D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a, b) ((a < b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a, b) ((a > b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a, b) ((b < 0.0) ? (a * (-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

// user function

void final_update_kernel(const int *dispx, const int *dispy, const int *dispz,
                         const int *idx, const float *dt, const ptrm_float k1,
                         const ptrm_float k2, const ptrm_float k3,
                         ptrm_float k4, ptrm_float yy) {

  for (int i = 0; i < 6; i++) {
    OPS_ACCM(k4, i, 0, 0, 0) = OPS_ACCM(k4, i, 0, 0, 0) * *dt;
    OPS_ACCM(yy, i, 0, 0, 0) =
        OPS_ACCM(yy, i, 0, 0, 0) + OPS_ACCM(k1, i, 0, 0, 0) / 6.0f +
        OPS_ACCM(k2, i, 0, 0, 0) / 3.0f + OPS_ACCM(k3, i, 0, 0, 0) / 3.0f +
        OPS_ACCM(k4, i, 0, 0, 0) / 6.0f;
  }
}

__kernel void ops_final_update_kernel(
    const int arg0, const int arg1, const int arg2, const float arg4,
    __global const float *restrict arg5, __global const float *restrict arg6,
    __global const float *restrict arg7, __global float *restrict arg8,
    __global float *restrict arg9, const int base5, const int base6,
    const int base7, const int base8, const int base9, int arg_idx0,
    int arg_idx1, int arg_idx2, const int size0, const int size1,
    const int size2) {

  int idx_y = get_global_id(1);
  int idx_z = get_global_id(2);
  int idx_x = get_global_id(0);

  int arg_idx[3];
  arg_idx[0] = arg_idx0 + idx_x;
  arg_idx[1] = arg_idx1 + idx_y;
  arg_idx[2] = arg_idx2 + idx_z;
  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
#ifdef OPS_SOA
    const ptrm_float ptr5 = {&arg5[base5 + idx_x * 1 * 6 +
                                   idx_y * 1 * 6 * xdim5_final_update_kernel +
                                   idx_z * 1 * 6 * xdim5_final_update_kernel *
                                       ydim5_final_update_kernel],
                             xdim5_final_update_kernel,
                             ydim5_final_update_kernel,
                             zdim5_final_update_kernel};
#else
    const ptrm_float ptr5 = {&arg5[base5 + idx_x * 1 * 6 +
                                   idx_y * 1 * 6 * xdim5_final_update_kernel +
                                   idx_z * 1 * 6 * xdim5_final_update_kernel *
                                       ydim5_final_update_kernel],
                             xdim5_final_update_kernel,
                             ydim5_final_update_kernel, 6};
#endif
#ifdef OPS_SOA
    const ptrm_float ptr6 = {&arg6[base6 + idx_x * 1 * 6 +
                                   idx_y * 1 * 6 * xdim6_final_update_kernel +
                                   idx_z * 1 * 6 * xdim6_final_update_kernel *
                                       ydim6_final_update_kernel],
                             xdim6_final_update_kernel,
                             ydim6_final_update_kernel,
                             zdim6_final_update_kernel};
#else
    const ptrm_float ptr6 = {&arg6[base6 + idx_x * 1 * 6 +
                                   idx_y * 1 * 6 * xdim6_final_update_kernel +
                                   idx_z * 1 * 6 * xdim6_final_update_kernel *
                                       ydim6_final_update_kernel],
                             xdim6_final_update_kernel,
                             ydim6_final_update_kernel, 6};
#endif
#ifdef OPS_SOA
    const ptrm_float ptr7 = {&arg7[base7 + idx_x * 1 * 6 +
                                   idx_y * 1 * 6 * xdim7_final_update_kernel +
                                   idx_z * 1 * 6 * xdim7_final_update_kernel *
                                       ydim7_final_update_kernel],
                             xdim7_final_update_kernel,
                             ydim7_final_update_kernel,
                             zdim7_final_update_kernel};
#else
    const ptrm_float ptr7 = {&arg7[base7 + idx_x * 1 * 6 +
                                   idx_y * 1 * 6 * xdim7_final_update_kernel +
                                   idx_z * 1 * 6 * xdim7_final_update_kernel *
                                       ydim7_final_update_kernel],
                             xdim7_final_update_kernel,
                             ydim7_final_update_kernel, 6};
#endif
#ifdef OPS_SOA
    ptrm_float ptr8 = {&arg8[base8 + idx_x * 1 * 6 +
                             idx_y * 1 * 6 * xdim8_final_update_kernel +
                             idx_z * 1 * 6 * xdim8_final_update_kernel *
                                 ydim8_final_update_kernel],
                       xdim8_final_update_kernel, ydim8_final_update_kernel,
                       zdim8_final_update_kernel};
#else
    ptrm_float ptr8 = {&arg8[base8 + idx_x * 1 * 6 +
                             idx_y * 1 * 6 * xdim8_final_update_kernel +
                             idx_z * 1 * 6 * xdim8_final_update_kernel *
                                 ydim8_final_update_kernel],
                       xdim8_final_update_kernel, ydim8_final_update_kernel, 6};
#endif
#ifdef OPS_SOA
    ptrm_float ptr9 = {&arg9[base9 + idx_x * 1 * 6 +
                             idx_y * 1 * 6 * xdim9_final_update_kernel +
                             idx_z * 1 * 6 * xdim9_final_update_kernel *
                                 ydim9_final_update_kernel],
                       xdim9_final_update_kernel, ydim9_final_update_kernel,
                       zdim9_final_update_kernel};
#else
    ptrm_float ptr9 = {&arg9[base9 + idx_x * 1 * 6 +
                             idx_y * 1 * 6 * xdim9_final_update_kernel +
                             idx_z * 1 * 6 * xdim9_final_update_kernel *
                                 ydim9_final_update_kernel],
                       xdim9_final_update_kernel, ydim9_final_update_kernel, 6};
#endif
    final_update_kernel(&arg0, &arg1, &arg2, arg_idx, &arg4, ptr5, ptr6, ptr7,
                        ptr8, ptr9);
  }
}
