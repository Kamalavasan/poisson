//
// auto-generated by ops.py
//

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_final_update_kernel(char const *name, ops_block block,
                                      int dim, int *range, ops_arg arg0,
                                      ops_arg arg1, ops_arg arg2, ops_arg arg3,
                                      ops_arg arg4, ops_arg arg5, ops_arg arg6,
                                      ops_arg arg7, ops_arg arg8,
                                      ops_arg arg9) {
  const int blockidx_start = 0;
  const int blockidx_end = block->count;
#ifdef OPS_BATCHED
  const int batch_size = block->count;
#endif
#else
void ops_par_loop_final_update_kernel_execute(const char *name, ops_block block,
                                              int blockidx_start,
                                              int blockidx_end, int dim,
                                              int *range, int nargs,
                                              ops_arg *args) {
#ifdef OPS_BATCHED
  const int batch_size = OPS_BATCH_SIZE;
#endif
  ops_arg arg0 = args[0];
  ops_arg arg1 = args[1];
  ops_arg arg2 = args[2];
  ops_arg arg3 = args[3];
  ops_arg arg4 = args[4];
  ops_arg arg5 = args[5];
  ops_arg arg6 = args[6];
  ops_arg arg7 = args[7];
  ops_arg arg8 = args[8];
  ops_arg arg9 = args[9];
#endif

  // Timing
  double __t1, __t2, __c1, __c2;

#ifndef OPS_LAZY
  ops_arg args[10] = {arg0, arg1, arg2, arg3, arg4,
                      arg5, arg6, arg7, arg8, arg9};

#endif

#if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args, 10, range, 4))
    return;
#endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timing_realloc(4, "final_update_kernel");
    OPS_instance::getOPSInstance()->OPS_kernels[4].count++;
    ops_timers_core(&__c2, &__t2);
  }

#ifdef OPS_DEBUG
  ops_register_args(args, "final_update_kernel");
#endif

  // compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
#if defined(OPS_LAZY) || !defined(OPS_MPI)
  for (int n = 0; n < 3; n++) {
    start[n] = range[2 * n];
    end[n] = range[2 * n + 1];
  }
#else
  if (compute_ranges(args, 10, block, range, start, end, arg_idx) < 0)
    return;
#endif

#ifdef OPS_MPI
  sub_dat_list sd = OPS_sub_dat_list[args[9].dat->index];
  arg_idx[0] = MAX(0, sd->decomp_disp[0]);
  arg_idx[1] = MAX(0, sd->decomp_disp[1]);
  arg_idx[2] = MAX(0, sd->decomp_disp[2]);
#else  // OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
#endif // OPS_MPI

// initialize variable with the dimension of dats
#if defined(OPS_BATCHED) && OPS_BATCHED == 0 && defined(OPS_HYBRID_LAYOUT)
  const int xdim5 = OPS_BATCH_SIZE;
  const int xdim6 = OPS_BATCH_SIZE;
  const int xdim7 = OPS_BATCH_SIZE;
  const int xdim8 = OPS_BATCH_SIZE;
  const int xdim9 = OPS_BATCH_SIZE;
#else
  const int xdim5 = args[5].dat->size[0];
  const int xdim6 = args[6].dat->size[0];
  const int xdim7 = args[7].dat->size[0];
  const int xdim8 = args[8].dat->size[0];
  const int xdim9 = args[9].dat->size[0];
#endif
  const int ydim5 = args[5].dat->size[1];
  const int zdim5 = args[5].dat->size[2];
  const int ydim6 = args[6].dat->size[1];
  const int zdim6 = args[6].dat->size[2];
  const int ydim7 = args[7].dat->size[1];
  const int zdim7 = args[7].dat->size[2];
  const int ydim8 = args[8].dat->size[1];
  const int zdim8 = args[8].dat->size[2];
  const int ydim9 = args[9].dat->size[1];
  const int zdim9 = args[9].dat->size[2];
#ifdef OPS_BATCHED
  const int bounds_0_l = OPS_BATCHED == 0 ? 0 : start[(OPS_BATCHED > 0) + -1];
  const int bounds_0_u = OPS_BATCHED == 0
                             ? MIN(batch_size, block->count - blockidx_start)
                             : end[(OPS_BATCHED > 0) + -1];
  const int bounds_1_l = OPS_BATCHED == 1 ? 0 : start[(OPS_BATCHED > 1) + 0];
  const int bounds_1_u = OPS_BATCHED == 1
                             ? MIN(batch_size, block->count - blockidx_start)
                             : end[(OPS_BATCHED > 1) + 0];
  const int bounds_2_l = OPS_BATCHED == 2 ? 0 : start[(OPS_BATCHED > 2) + 1];
  const int bounds_2_u = OPS_BATCHED == 2
                             ? MIN(batch_size, block->count - blockidx_start)
                             : end[(OPS_BATCHED > 2) + 1];
  const int bounds_3_l = OPS_BATCHED == 3 ? 0 : start[(OPS_BATCHED > 3) + 2];
  const int bounds_3_u = OPS_BATCHED == 3
                             ? MIN(batch_size, block->count - blockidx_start)
                             : end[(OPS_BATCHED > 3) + 2];
#else
  const int bounds_0_l = start[0];
  const int bounds_0_u = end[0];
  const int bounds_1_l = start[1];
  const int bounds_1_u = end[1];
  const int bounds_2_l = start[2];
  const int bounds_2_u = end[2];
  const int bounds_3_l = 0;
  const int bounds_3_u = blockidx_end - blockidx_start;
#endif

#ifndef OPS_LAZY
  // Halo Exchanges
  ops_H_D_exchanges_host(args, 10);
  ops_halo_exchanges(args, 10, range);
  ops_H_D_exchanges_host(args, 10);
#endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timers_core(&__c1, &__t1);
    OPS_instance::getOPSInstance()->OPS_kernels[4].mpi_time += __t1 - __t2;
  }

  // set up initial pointers
  int *__restrict__ dispx = (int *)args[0].data;

  int *__restrict__ dispy = (int *)args[1].data;

  int *__restrict__ dispz = (int *)args[2].data;

  float *__restrict__ dt = (float *)args[4].data;

  float *__restrict__ k1_p =
      (float *)(args[5].data + args[5].dat->base_offset +
                blockidx_start * args[5].dat->batch_offset);

  float *__restrict__ k2_p =
      (float *)(args[6].data + args[6].dat->base_offset +
                blockidx_start * args[6].dat->batch_offset);

  float *__restrict__ k3_p =
      (float *)(args[7].data + args[7].dat->base_offset +
                blockidx_start * args[7].dat->batch_offset);

  float *__restrict__ k4_p =
      (float *)(args[8].data + args[8].dat->base_offset +
                blockidx_start * args[8].dat->batch_offset);

  float *__restrict__ yy_p =
      (float *)(args[9].data + args[9].dat->base_offset +
                blockidx_start * args[9].dat->batch_offset);

#if defined(_OPENMP) && defined(OPS_BATCHED) && !defined(OPS_LAZY)
#pragma omp parallel for
#endif
  for (int n_3 = bounds_3_l; n_3 < bounds_3_u; n_3++) {
#if defined(_OPENMP) && !defined(OPS_BATCHED)
#pragma omp parallel for collapse(2)
#endif
    for (int n_2 = bounds_2_l; n_2 < bounds_2_u; n_2++) {
      for (int n_1 = bounds_1_l; n_1 < bounds_1_u; n_1++) {
#ifdef __INTEL_COMPILER
#pragma loop_count(10000)
#pragma omp simd
#elif defined(__clang__)
#pragma clang loop vectorize(assume_safety)
#elif defined(__GNUC__)
#pragma simd
#pragma GCC ivdep
#else
#pragma simd
#endif
        for (int n_0 = bounds_0_l; n_0 < bounds_0_u; n_0++) {
#if defined(OPS_BATCHED) && OPS_BATCHED == 0
          int idx[] = {arg_idx[0] + n_1, arg_idx[1] + n_2, arg_idx[2] + n_3,
                       blockidx_start + n_0};
#elif OPS_BATCHED == 1
          int idx[] = {arg_idx[0] + n_0, arg_idx[1] + n_2, arg_idx[2] + n_3,
                       blockidx_start + n_1};
#elif OPS_BATCHED == 2
        int idx[] = {arg_idx[0] + n_0, arg_idx[1] + n_1, arg_idx[2] + n_3,
                     blockidx_start + n_2};
#else
        int idx[] = {arg_idx[0] + n_0, arg_idx[1] + n_1, arg_idx[2] + n_2,
                     blockidx_start + n_3};
#endif
#ifdef OPS_SOA
          const ACC<float> k1(6, xdim5, ydim5, zdim5,
                              k1_p + n_0 + n_1 * xdim5 + n_2 * xdim5 * ydim5 +
                                  n_3 * xdim5 * ydim5 * zdim5);
#else
          const ACC<float> k1(6, xdim5, ydim5, zdim5,
                              k1_p +
                                  6 * (n_0 + n_1 * xdim5 + n_2 * xdim5 * ydim5 +
                                       n_3 * xdim5 * ydim5 * zdim5));
#endif
#ifdef OPS_SOA
          const ACC<float> k2(6, xdim6, ydim6, zdim6,
                              k2_p + n_0 + n_1 * xdim6 + n_2 * xdim6 * ydim6 +
                                  n_3 * xdim6 * ydim6 * zdim6);
#else
          const ACC<float> k2(6, xdim6, ydim6, zdim6,
                              k2_p +
                                  6 * (n_0 + n_1 * xdim6 + n_2 * xdim6 * ydim6 +
                                       n_3 * xdim6 * ydim6 * zdim6));
#endif
#ifdef OPS_SOA
          const ACC<float> k3(6, xdim7, ydim7, zdim7,
                              k3_p + n_0 + n_1 * xdim7 + n_2 * xdim7 * ydim7 +
                                  n_3 * xdim7 * ydim7 * zdim7);
#else
          const ACC<float> k3(6, xdim7, ydim7, zdim7,
                              k3_p +
                                  6 * (n_0 + n_1 * xdim7 + n_2 * xdim7 * ydim7 +
                                       n_3 * xdim7 * ydim7 * zdim7));
#endif
#ifdef OPS_SOA
          ACC<float> k4(6, xdim8, ydim8, zdim8,
                        k4_p + n_0 + n_1 * xdim8 + n_2 * xdim8 * ydim8 +
                            n_3 * xdim8 * ydim8 * zdim8);
#else
          ACC<float> k4(6, xdim8, ydim8, zdim8,
                        k4_p + 6 * (n_0 + n_1 * xdim8 + n_2 * xdim8 * ydim8 +
                                    n_3 * xdim8 * ydim8 * zdim8));
#endif
#ifdef OPS_SOA
          ACC<float> yy(6, xdim9, ydim9, zdim9,
                        yy_p + n_0 + n_1 * xdim9 + n_2 * xdim9 * ydim9 +
                            n_3 * xdim9 * ydim9 * zdim9);
#else
          ACC<float> yy(6, xdim9, ydim9, zdim9,
                        yy_p + 6 * (n_0 + n_1 * xdim9 + n_2 * xdim9 * ydim9 +
                                    n_3 * xdim9 * ydim9 * zdim9));
#endif

          for (int i = 0; i < 6; i++) {
            k4(i, 0, 0, 0) = k4(i, 0, 0, 0) * *dt;
            yy(i, 0, 0, 0) = yy(i, 0, 0, 0) + k1(i, 0, 0, 0) / 6.0f +
                             k2(i, 0, 0, 0) / 3.0f + k3(i, 0, 0, 0) / 3.0f +
                             k4(i, 0, 0, 0) / 6.0f;
          }
        }
      }
    }
#if OPS_BATCHED == 3 || !defined(OPS_BATCHED)
#endif
  }
  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timers_core(&__c2, &__t2);
    OPS_instance::getOPSInstance()->OPS_kernels[4].time += __t2 - __t1;
  }
#ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 10);
  ops_set_halo_dirtybit3(&args[8], range);
  ops_set_halo_dirtybit3(&args[9], range);
#endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    // Update kernel record
    ops_timers_core(&__c1, &__t1);
    OPS_instance::getOPSInstance()->OPS_kernels[4].mpi_time += __t1 - __t2;
    OPS_instance::getOPSInstance()->OPS_kernels[4].transfer +=
        ops_compute_transfer(dim, start, end, &arg5);
    OPS_instance::getOPSInstance()->OPS_kernels[4].transfer +=
        ops_compute_transfer(dim, start, end, &arg6);
    OPS_instance::getOPSInstance()->OPS_kernels[4].transfer +=
        ops_compute_transfer(dim, start, end, &arg7);
    OPS_instance::getOPSInstance()->OPS_kernels[4].transfer +=
        ops_compute_transfer(dim, start, end, &arg8);
    OPS_instance::getOPSInstance()->OPS_kernels[4].transfer +=
        ops_compute_transfer(dim, start, end, &arg9);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_final_update_kernel(char const *name, ops_block block,
                                      int dim, int *range, ops_arg arg0,
                                      ops_arg arg1, ops_arg arg2, ops_arg arg3,
                                      ops_arg arg4, ops_arg arg5, ops_arg arg6,
                                      ops_arg arg7, ops_arg arg8,
                                      ops_arg arg9) {
  ops_kernel_descriptor *desc =
      (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 4;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 4;
  for (int i = 0; i < 6; i++) {
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 10;
  desc->args = (ops_arg *)malloc(10 * sizeof(ops_arg));
  desc->args[0] = arg0;
  char *tmp = (char *)malloc(1 * sizeof(int));
  memcpy(tmp, arg0.data, 1 * sizeof(int));
  desc->args[0].data = tmp;
  desc->args[1] = arg1;
  tmp = (char *)malloc(1 * sizeof(int));
  memcpy(tmp, arg1.data, 1 * sizeof(int));
  desc->args[1].data = tmp;
  desc->args[2] = arg2;
  tmp = (char *)malloc(1 * sizeof(int));
  memcpy(tmp, arg2.data, 1 * sizeof(int));
  desc->args[2].data = tmp;
  desc->args[3] = arg3;
  desc->args[4] = arg4;
  tmp = (char *)malloc(1 * sizeof(float));
  memcpy(tmp, arg4.data, 1 * sizeof(float));
  desc->args[4].data = tmp;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->function = ops_par_loop_final_update_kernel_execute;
  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timing_realloc(4, "final_update_kernel");
  }
  ops_enqueue_kernel(desc);
}
#endif
