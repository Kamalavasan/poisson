//
// auto-generated by ops.py
//

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_fd3d_pml_kernel(char const *name, ops_block block, int dim,
                                  int *range, ops_arg arg0, ops_arg arg1,
                                  ops_arg arg2, ops_arg arg3, ops_arg arg4,
                                  ops_arg arg5, ops_arg arg6, ops_arg arg7) {
  const int blockidx_start = 0;
  const int blockidx_end = block->count;
#ifdef OPS_BATCHED
  const int batch_size = block->count;
#endif
#else
void ops_par_loop_fd3d_pml_kernel_execute(const char *name, ops_block block,
                                          int blockidx_start, int blockidx_end,
                                          int dim, int *range, int nargs,
                                          ops_arg *args) {
#ifdef OPS_BATCHED
  const int batch_size = OPS_BATCH_SIZE;
#endif
  ops_arg arg0 = args[0];
  ops_arg arg1 = args[1];
  ops_arg arg2 = args[2];
  ops_arg arg3 = args[3];
  ops_arg arg4 = args[4];
  ops_arg arg5 = args[5];
  ops_arg arg6 = args[6];
  ops_arg arg7 = args[7];
#endif

  // Timing
  double __t1, __t2, __c1, __c2;

#ifndef OPS_LAZY
  ops_arg args[8] = {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7};

#endif

#if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args, 8, range, 1))
    return;
#endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timing_realloc(1, "fd3d_pml_kernel");
    OPS_instance::getOPSInstance()->OPS_kernels[1].count++;
    ops_timers_core(&__c2, &__t2);
  }

#ifdef OPS_DEBUG
  ops_register_args(args, "fd3d_pml_kernel");
#endif

  // compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
#if defined(OPS_LAZY) || !defined(OPS_MPI)
  for (int n = 0; n < 3; n++) {
    start[n] = range[2 * n];
    end[n] = range[2 * n + 1];
  }
#else
  if (compute_ranges(args, 8, block, range, start, end, arg_idx) < 0)
    return;
#endif

#ifdef OPS_MPI
  sub_dat_list sd = OPS_sub_dat_list[args[7].dat->index];
  arg_idx[0] = MAX(0, sd->decomp_disp[0]);
  arg_idx[1] = MAX(0, sd->decomp_disp[1]);
  arg_idx[2] = MAX(0, sd->decomp_disp[2]);
#else  // OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
#endif // OPS_MPI

// initialize variable with the dimension of dats
#if defined(OPS_BATCHED) && OPS_BATCHED == 0 && defined(OPS_HYBRID_LAYOUT)
  const int xdim4 = OPS_BATCH_SIZE;
  const int xdim5 = OPS_BATCH_SIZE;
  const int xdim6 = OPS_BATCH_SIZE;
  const int xdim7 = OPS_BATCH_SIZE;
#else
  const int xdim4 = args[4].dat->size[0];
  const int xdim5 = args[5].dat->size[0];
  const int xdim6 = args[6].dat->size[0];
  const int xdim7 = args[7].dat->size[0];
#endif
  const int ydim4 = args[4].dat->size[1];
  const int zdim4 = args[4].dat->size[2];
  const int ydim5 = args[5].dat->size[1];
  const int zdim5 = args[5].dat->size[2];
  const int ydim6 = args[6].dat->size[1];
  const int zdim6 = args[6].dat->size[2];
  const int ydim7 = args[7].dat->size[1];
  const int zdim7 = args[7].dat->size[2];
#ifdef OPS_BATCHED
  const int bounds_0_l = OPS_BATCHED == 0 ? 0 : start[(OPS_BATCHED > 0) + -1];
  const int bounds_0_u = OPS_BATCHED == 0
                             ? MIN(batch_size, block->count - blockidx_start)
                             : end[(OPS_BATCHED > 0) + -1];
  const int bounds_1_l = OPS_BATCHED == 1 ? 0 : start[(OPS_BATCHED > 1) + 0];
  const int bounds_1_u = OPS_BATCHED == 1
                             ? MIN(batch_size, block->count - blockidx_start)
                             : end[(OPS_BATCHED > 1) + 0];
  const int bounds_2_l = OPS_BATCHED == 2 ? 0 : start[(OPS_BATCHED > 2) + 1];
  const int bounds_2_u = OPS_BATCHED == 2
                             ? MIN(batch_size, block->count - blockidx_start)
                             : end[(OPS_BATCHED > 2) + 1];
  const int bounds_3_l = OPS_BATCHED == 3 ? 0 : start[(OPS_BATCHED > 3) + 2];
  const int bounds_3_u = OPS_BATCHED == 3
                             ? MIN(batch_size, block->count - blockidx_start)
                             : end[(OPS_BATCHED > 3) + 2];
#else
  const int bounds_0_l = start[0];
  const int bounds_0_u = end[0];
  const int bounds_1_l = start[1];
  const int bounds_1_u = end[1];
  const int bounds_2_l = start[2];
  const int bounds_2_u = end[2];
  const int bounds_3_l = 0;
  const int bounds_3_u = blockidx_end - blockidx_start;
#endif

#ifndef OPS_LAZY
  // Halo Exchanges
  ops_H_D_exchanges_host(args, 8);
  ops_halo_exchanges(args, 8, range);
  ops_H_D_exchanges_host(args, 8);
#endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timers_core(&__c1, &__t1);
    OPS_instance::getOPSInstance()->OPS_kernels[1].mpi_time += __t1 - __t2;
  }

  // set up initial pointers
  int *__restrict__ dispx = (int *)args[0].data;

  int *__restrict__ dispy = (int *)args[1].data;

  int *__restrict__ dispz = (int *)args[2].data;

  float *__restrict__ rho_p =
      (float *)(args[4].data + args[4].dat->base_offset +
                blockidx_start * args[4].dat->batch_offset);

  float *__restrict__ mu_p =
      (float *)(args[5].data + args[5].dat->base_offset +
                blockidx_start * args[5].dat->batch_offset);

  float *__restrict__ yy_p =
      (float *)(args[6].data + args[6].dat->base_offset +
                blockidx_start * args[6].dat->batch_offset);

  float *__restrict__ dyy_p =
      (float *)(args[7].data + args[7].dat->base_offset +
                blockidx_start * args[7].dat->batch_offset);

#if defined(_OPENMP) && defined(OPS_BATCHED) && !defined(OPS_LAZY)
#pragma omp parallel for
#endif
  for (int n_3 = bounds_3_l; n_3 < bounds_3_u; n_3++) {
#if defined(_OPENMP) && !defined(OPS_BATCHED)
#pragma omp parallel for collapse(2)
#endif
    for (int n_2 = bounds_2_l; n_2 < bounds_2_u; n_2++) {
      for (int n_1 = bounds_1_l; n_1 < bounds_1_u; n_1++) {
#ifdef __INTEL_COMPILER
#pragma loop_count(10000)
#pragma omp simd
#elif defined(__clang__)
#pragma clang loop vectorize(assume_safety)
#elif defined(__GNUC__)
#pragma simd
#pragma GCC ivdep
#else
#pragma simd
#endif
        for (int n_0 = bounds_0_l; n_0 < bounds_0_u; n_0++) {
#if defined(OPS_BATCHED) && OPS_BATCHED == 0
          int idx[] = {arg_idx[0] + n_1, arg_idx[1] + n_2, arg_idx[2] + n_3,
                       blockidx_start + n_0};
#elif OPS_BATCHED == 1
          int idx[] = {arg_idx[0] + n_0, arg_idx[1] + n_2, arg_idx[2] + n_3,
                       blockidx_start + n_1};
#elif OPS_BATCHED == 2
        int idx[] = {arg_idx[0] + n_0, arg_idx[1] + n_1, arg_idx[2] + n_3,
                     blockidx_start + n_2};
#else
        int idx[] = {arg_idx[0] + n_0, arg_idx[1] + n_1, arg_idx[2] + n_2,
                     blockidx_start + n_3};
#endif
          const ACC<float> rho(xdim4, ydim4, zdim4,
                               rho_p + n_0 + n_1 * xdim4 + n_2 * xdim4 * ydim4 +
                                   n_3 * xdim4 * ydim4 * zdim4);
          const ACC<float> mu(xdim5, ydim5, zdim5,
                              mu_p + n_0 + n_1 * xdim5 + n_2 * xdim5 * ydim5 +
                                  n_3 * xdim5 * ydim5 * zdim5);
#ifdef OPS_SOA
          const ACC<float> yy(6, xdim6, ydim6, zdim6,
                              yy_p + n_0 + n_1 * xdim6 + n_2 * xdim6 * ydim6 +
                                  n_3 * xdim6 * ydim6 * zdim6);
#else
          const ACC<float> yy(6, xdim6, ydim6, zdim6,
                              yy_p +
                                  6 * (n_0 + n_1 * xdim6 + n_2 * xdim6 * ydim6 +
                                       n_3 * xdim6 * ydim6 * zdim6));
#endif
#ifdef OPS_SOA
          ACC<float> dyy(6, xdim7, ydim7, zdim7,
                         dyy_p + n_0 + n_1 * xdim7 + n_2 * xdim7 * ydim7 +
                             n_3 * xdim7 * ydim7 * zdim7);
#else
          ACC<float> dyy(6, xdim7, ydim7, zdim7,
                         dyy_p + 6 * (n_0 + n_1 * xdim7 + n_2 * xdim7 * ydim7 +
                                      n_3 * xdim7 * ydim7 * zdim7));
#endif

          const float c[9] = {0.0035714285714285713,
                              -0.0380952380952381,
                              0.2,
                              -0.8,
                              0.0,
                              0.8,
                              -0.2,
                              0.0380952380952381,
                              -0.0035714285714285713};
          float invdx = 1.0 / dx;
          float invdy = 1.0 / dy;
          float invdz = 1.0 / dz;
          int xbeg = half;
          int xend = nx - half;
          int ybeg = half;
          int yend = ny - half;
          int zbeg = half;
          int zend = nz - half;
          int xpmlbeg = xbeg + pml_width;
          int ypmlbeg = ybeg + pml_width;
          int zpmlbeg = zbeg + pml_width;
          int xpmlend = xend - pml_width;
          int ypmlend = yend - pml_width;
          int zpmlend = zend - pml_width;

          float sigma = mu(0, 0, 0) / rho(0, 0, 0);
          float sigmax = 0.0;
          float sigmay = 0.0;
          float sigmaz = 0.0;
          if (idx[0] <= xbeg + pml_width) {
            sigmax = (xbeg + pml_width - idx[0]) * sigma * 0.1f;
          }
          if (idx[0] >= xend - pml_width) {
            sigmax = (idx[0] - (xend - pml_width)) * sigma * 0.1f;
          }
          if (idx[1] <= ybeg + pml_width) {
            sigmay = (ybeg + pml_width - idx[1]) * sigma * 0.1f;
          }
          if (idx[1] >= yend - pml_width) {
            sigmay = (idx[1] - (yend - pml_width)) * sigma * 0.1f;
          }
          if (idx[2] <= zbeg + pml_width) {
            sigmaz = (zbeg + pml_width - idx[2]) * sigma * 0.1f;
          }
          if (idx[2] >= zend - pml_width) {
            sigmaz = (idx[2] - (zend - pml_width)) * sigma * 0.1f;
          }

          float px = yy(0, 0, 0, 0);
          float py = yy(1, 0, 0, 0);
          float pz = yy(2, 0, 0, 0);

          float vx = yy(3, 0, 0, 0);
          float vy = yy(4, 0, 0, 0);
          float vz = yy(5, 0, 0, 0);

          float vxx = 0.0;
          float vxy = 0.0;
          float vxz = 0.0;

          float vyx = 0.0;
          float vyy = 0.0;
          float vyz = 0.0;

          float vzx = 0.0;
          float vzy = 0.0;
          float vzz = 0.0;

          float pxx = 0.0;
          float pxy = 0.0;
          float pxz = 0.0;

          float pyx = 0.0;
          float pyy = 0.0;
          float pyz = 0.0;

          float pzx = 0.0;
          float pzy = 0.0;
          float pzz = 0.0;

          for (int i = -half; i <= half; i++) {
            pxx += yy(0, i, 0, 0) * c[i + half];
            pyx += yy(1, i, 0, 0) * c[i + half];
            pzx += yy(2, i, 0, 0) * c[i + half];

            vxx += yy(3, i, 0, 0) * c[i + half];
            vyx += yy(4, i, 0, 0) * c[i + half];
            vzx += yy(5, i, 0, 0) * c[i + half];

            pxy += yy(0, 0, i, 0) * c[i + half];
            pyy += yy(1, 0, i, 0) * c[i + half];
            pzy += yy(2, 0, i, 0) * c[i + half];

            vxy += yy(3, 0, i, 0) * c[i + half];
            vyy += yy(4, 0, i, 0) * c[i + half];
            vzy += yy(5, 0, i, 0) * c[i + half];

            pxz += yy(0, 0, 0, i) * c[i + half];
            pyz += yy(1, 0, 0, i) * c[i + half];
            pzz += yy(2, 0, 0, i) * c[i + half];

            vxz += yy(3, 0, 0, i) * c[i + half];
            vyz += yy(4, 0, 0, i) * c[i + half];
            vzz += yy(5, 0, 0, i) * c[i + half];
          }

          pxx *= invdx;
          pyx *= invdx;
          pzx *= invdx;

          vxx *= invdx;
          vyx *= invdx;
          vzx *= invdx;

          pxy *= invdy;
          pyy *= invdy;
          pzy *= invdy;

          vxy *= invdy;
          vyy *= invdy;
          vzy *= invdy;

          pxz *= invdz;
          pyz *= invdz;
          pzz *= invdz;

          vxz *= invdz;
          vyz *= invdz;
          vzz *= invdz;

          dyy(0, 0, 0, 0) = vxx / rho(0, 0, 0) - sigmax * px;
          dyy(3, 0, 0, 0) = (pxx + pyx + pxz) * mu(0, 0, 0) - sigmax * vx;

          dyy(1, 0, 0, 0) = vyy / rho(0, 0, 0) - sigmay * py;
          dyy(4, 0, 0, 0) = (pxy + pyy + pyz) * mu(0, 0, 0) - sigmay * vy;

          dyy(2, 0, 0, 0) = vzz / rho(0, 0, 0) - sigmaz * pz;
          dyy(5, 0, 0, 0) = (pxz + pyz + pzz) * mu(0, 0, 0) - sigmaz * vz;
        }
      }
    }
#if OPS_BATCHED == 3 || !defined(OPS_BATCHED)
#endif
  }
  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timers_core(&__c2, &__t2);
    OPS_instance::getOPSInstance()->OPS_kernels[1].time += __t2 - __t1;
  }
#ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 8);
  ops_set_halo_dirtybit3(&args[7], range);
#endif

  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    // Update kernel record
    ops_timers_core(&__c1, &__t1);
    OPS_instance::getOPSInstance()->OPS_kernels[1].mpi_time += __t1 - __t2;
    OPS_instance::getOPSInstance()->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg4);
    OPS_instance::getOPSInstance()->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg5);
    OPS_instance::getOPSInstance()->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg6);
    OPS_instance::getOPSInstance()->OPS_kernels[1].transfer +=
        ops_compute_transfer(dim, start, end, &arg7);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_fd3d_pml_kernel(char const *name, ops_block block, int dim,
                                  int *range, ops_arg arg0, ops_arg arg1,
                                  ops_arg arg2, ops_arg arg3, ops_arg arg4,
                                  ops_arg arg5, ops_arg arg6, ops_arg arg7) {
  ops_kernel_descriptor *desc =
      (ops_kernel_descriptor *)malloc(sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 1;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 1;
  for (int i = 0; i < 6; i++) {
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 8;
  desc->args = (ops_arg *)malloc(8 * sizeof(ops_arg));
  desc->args[0] = arg0;
  char *tmp = (char *)malloc(1 * sizeof(int));
  memcpy(tmp, arg0.data, 1 * sizeof(int));
  desc->args[0].data = tmp;
  desc->args[1] = arg1;
  tmp = (char *)malloc(1 * sizeof(int));
  memcpy(tmp, arg1.data, 1 * sizeof(int));
  desc->args[1].data = tmp;
  desc->args[2] = arg2;
  tmp = (char *)malloc(1 * sizeof(int));
  memcpy(tmp, arg2.data, 1 * sizeof(int));
  desc->args[2].data = tmp;
  desc->args[3] = arg3;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->function = ops_par_loop_fd3d_pml_kernel_execute;
  if (OPS_instance::getOPSInstance()->OPS_diags > 1) {
    ops_timing_realloc(1, "fd3d_pml_kernel");
  }
  ops_enqueue_kernel(desc);
}
#endif
